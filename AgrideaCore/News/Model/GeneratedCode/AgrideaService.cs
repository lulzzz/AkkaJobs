/////////////////////////////////////////////////////////////////////////////////
//                                                                             //
// <auto-generated>                                                            //
// Date=? Machine=? User=?                                                     //
// Copyright (c) 2010-2011 Agridea, All Rights Reserved                        //
// </auto-generated>                                                           //
//                                                                             //
/////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Data.SqlClient;
//using System.Data.Entity.SqlServer;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using System.Text;
using Agridea;
using Agridea.Calendar;
using Agridea.DataRepository;
using Agridea.Diagnostics.Contracts;
using Agridea.Diagnostics.Logging;
using Agridea.Metadata;
using Agridea.News;
using Agridea.Security;
using Agridea.Service;
using Agridea.Web.UI;

namespace Agridea
{
    public partial class AgrideaService
    {
        #region Services
        #region GetByDiscriminants
        #endregion
    
        #region Insert/Update/Delete Sql commands
        public void SqlBulkCopy(IEnumerable<NewsItem> items)
        {
            using (var bulkCopy = new SqlBulkCopy(ConnectionString, SqlBulkCopyOptions.KeepIdentity |
                        SqlBulkCopyOptions.UseInternalTransaction |
                        SqlBulkCopyOptions.KeepNulls))
            {
    		    bulkCopy.BulkCopyTimeout = 0;
                bulkCopy.BatchSize = items.Count();
                bulkCopy.DestinationTableName = CodeGenerationHelper.GetTableName<NewsItem>();
                var table = new System.Data.DataTable();
    			
                table.Columns.Add("CreationDate");
                bulkCopy.ColumnMappings.Add("CreationDate", "CreationDate");  
                table.Columns.Add("CreatedBy");
                bulkCopy.ColumnMappings.Add("CreatedBy", "CreatedBy");  
                table.Columns.Add("ModificationDate");
                bulkCopy.ColumnMappings.Add("ModificationDate", "ModificationDate");  
                table.Columns.Add("ModifiedBy");
                bulkCopy.ColumnMappings.Add("ModifiedBy", "ModifiedBy");  
                table.Columns.Add("Comment");
                bulkCopy.ColumnMappings.Add("Comment", "Comment");  
                table.Columns.Add("Description");
                bulkCopy.ColumnMappings.Add("Description", "Description");  
                table.Columns.Add("FileData");
                bulkCopy.ColumnMappings.Add("FileData", "FileData");  
                table.Columns.Add("FileName");
                bulkCopy.ColumnMappings.Add("FileName", "FileName");  
                table.Columns.Add("FileType");
                bulkCopy.ColumnMappings.Add("FileType", "FileType");  
                table.Columns.Add("LinkUrl");
                bulkCopy.ColumnMappings.Add("LinkUrl", "LinkUrl");  
                table.Columns.Add("Title");
                bulkCopy.ColumnMappings.Add("Title", "Title");  
                table.Columns.Add("ValidityDateEnd");
                bulkCopy.ColumnMappings.Add("ValidityDateEnd", "ValidityDateEnd");  
                table.Columns.Add("ValidityDateStart");
                bulkCopy.ColumnMappings.Add("ValidityDateStart", "ValidityDateStart");  
                foreach (var item in items) table.Rows.Add(new object[]{item.CreationDate,item.CreatedBy,item.ModificationDate,item.ModifiedBy,item.Comment,item.Description,item.FileData,item.FileName,item.FileType,item.LinkUrl,item.Title,item.ValidityDateEnd,item.ValidityDateStart});
                bulkCopy.WriteToServer(table);
            }
        }
    	
        public void SqlBulkCopyWithId(IEnumerable<NewsItem> items)
        {
            using (var bulkCopy = new SqlBulkCopy(ConnectionString, SqlBulkCopyOptions.KeepIdentity |
                        SqlBulkCopyOptions.UseInternalTransaction |
                        SqlBulkCopyOptions.KeepNulls))
            {
    		    bulkCopy.BulkCopyTimeout = 0;
                bulkCopy.BatchSize = items.Count();
                bulkCopy.DestinationTableName = CodeGenerationHelper.GetTableName<NewsItem>();
                var table = new System.Data.DataTable();    
                table.Columns.Add("Id");
                bulkCopy.ColumnMappings.Add("Id", "Id");  
                table.Columns.Add("CreationDate");
                bulkCopy.ColumnMappings.Add("CreationDate", "CreationDate");  
                table.Columns.Add("CreatedBy");
                bulkCopy.ColumnMappings.Add("CreatedBy", "CreatedBy");  
                table.Columns.Add("ModificationDate");
                bulkCopy.ColumnMappings.Add("ModificationDate", "ModificationDate");  
                table.Columns.Add("ModifiedBy");
                bulkCopy.ColumnMappings.Add("ModifiedBy", "ModifiedBy");  
                table.Columns.Add("Comment");
                bulkCopy.ColumnMappings.Add("Comment", "Comment");  
                table.Columns.Add("Description");
                bulkCopy.ColumnMappings.Add("Description", "Description");  
                table.Columns.Add("FileData");
                bulkCopy.ColumnMappings.Add("FileData", "FileData");  
                table.Columns.Add("FileName");
                bulkCopy.ColumnMappings.Add("FileName", "FileName");  
                table.Columns.Add("FileType");
                bulkCopy.ColumnMappings.Add("FileType", "FileType");  
                table.Columns.Add("LinkUrl");
                bulkCopy.ColumnMappings.Add("LinkUrl", "LinkUrl");  
                table.Columns.Add("Title");
                bulkCopy.ColumnMappings.Add("Title", "Title");  
                table.Columns.Add("ValidityDateEnd");
                bulkCopy.ColumnMappings.Add("ValidityDateEnd", "ValidityDateEnd");  
                table.Columns.Add("ValidityDateStart");
                bulkCopy.ColumnMappings.Add("ValidityDateStart", "ValidityDateStart");  
                foreach (var item in items) table.Rows.Add(new object[]{item.Id,item.CreationDate,item.CreatedBy,item.ModificationDate,item.ModifiedBy,item.Comment,item.Description,item.FileData,item.FileName,item.FileType,item.LinkUrl,item.Title,item.ValidityDateEnd,item.ValidityDateStart});
                bulkCopy.WriteToServer(table);
            }
        }
        public void SqlInsert(IEnumerable<NewsItem> items) 
        {
            if(!items.Any()) return;
    
            StringBuilder commandStringBuilder = new StringBuilder();
            commandStringBuilder.AppendFormat("INSERT INTO [{0}].[{1}].[{2}]{3}", DataRepositoryHelper.DatabaseNameFor(ConnectionString), "dbo", CodeGenerationHelper.GetTableName<NewsItem>(), Environment.NewLine);
            commandStringBuilder.AppendFormat("{0}{1}","(CreationDate, CreatedBy, ModificationDate, ModifiedBy, Comment, Description, FileData, FileName, FileType, LinkUrl, Title, ValidityDateEnd, ValidityDateStart)", Environment.NewLine);
            commandStringBuilder.AppendFormat("VALUES{0}", Environment.NewLine);
            
            int rowCount = 0;
            var startTime = DateTime.Now;
            string separator = null;
            StringBuilder stringBuilder = new StringBuilder();
            
            foreach(var item in items)
            {
                if (rowCount % 1000 == 0)
                {
                    stringBuilder.Append(commandStringBuilder);
                    separator = null;
                }
                if(separator != null) stringBuilder.AppendLine(separator);
                stringBuilder.Append(string.Format("({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12})", SqlEncode(item.CreationDate), SqlEncode(item.CreatedBy), SqlEncode(item.ModificationDate), SqlEncode(item.ModifiedBy), SqlEncode(item.Comment), SqlEncode(item.Description), SqlEncode(item.FileData), SqlEncode(item.FileName), SqlEncode(item.FileType), SqlEncode(item.LinkUrl), SqlEncode(item.Title), SqlEncode(item.ValidityDateEnd), SqlEncode(item.ValidityDateStart)));
                
                rowCount++;
                separator = ",";
            }
            
            string command = stringBuilder.ToString();
            try
            {
                Repository.ExecuteSqlCommand(command);
                Log.Verbose("Inserted {0} '{1}' duration {2}", rowCount, "NewsItem", DateTime.Now - startTime);
            }
            catch(Exception)
            {
                Log.Error(command);
                throw;
            }
        }
        public void SqlUpdate(IEnumerable<NewsItem> items) 
        {
            if(!items.Any()) return;
            
            StringBuilder stringBuilder = new StringBuilder();
            foreach(var item in items)
            {
                stringBuilder.AppendFormat("UPDATE sqltable{0}", Environment.NewLine);
                stringBuilder.AppendLine(string.Format("SET CreationDate={0}, CreatedBy={1}, ModificationDate={2}, ModifiedBy={3}, Comment={4}, Description={5}, FileData={6}, FileName={7}, FileType={8}, LinkUrl={9}, Title={10}, ValidityDateEnd={11}, ValidityDateStart={12}", SqlEncode(item.CreationDate), SqlEncode(item.CreatedBy), SqlEncode(DateTime.Now), SqlEncode(UserName), SqlEncode(item.Comment), SqlEncode(item.Description), SqlEncode(item.FileData), SqlEncode(item.FileName), SqlEncode(item.FileType), SqlEncode(item.LinkUrl), SqlEncode(item.Title), SqlEncode(item.ValidityDateEnd), SqlEncode(item.ValidityDateStart)));
                stringBuilder.AppendFormat("FROM [{0}].[{1}].[{2}] AS sqltable {3}", DataRepositoryHelper.DatabaseNameFor(ConnectionString), "dbo", CodeGenerationHelper.GetTableName<NewsItem>(), Environment.NewLine);
                stringBuilder.AppendFormat("WHERE sqltable.Id='{0}'{1}", item.Id, Environment.NewLine);
            }
    
            string command = stringBuilder.ToString();
            try
            {
                Repository.ExecuteSqlCommand(command);
            }
            catch(Exception)
            {
                Log.Error(command);
                throw;
            }
        }
        #endregion
    
        #region CascadeRemove
        public virtual void CascadeRemove(NewsItem item)
        {
            Requires<InvalidKeyException>.GreaterThan(item.Id, 0);
            Log.Verbose("CascadeRemove({0})", item.ToString());
    		//1==>X
            //1<==>X
            base.CascadeRemove(item);
        }
        public virtual void CascadeRemoveRange(IList<NewsItem> items)
        {
            foreach(var item in items.ToArray()) CascadeRemove(item);
        }
        #endregion
        #endregion
     
    }
}
