/////////////////////////////////////////////////////////////////////////////////
//                                                                             //
// <auto-generated>                                                            //
// Date=? Machine=? User=?                                                     //
// Copyright (c) 2010-2011 Agridea, All Rights Reserved                        //
// </auto-generated>                                                           //
//                                                                             //
/////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Data.SqlClient;
//using System.Data.Entity.SqlServer;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using System.Text;
using Agridea;
using Agridea.Calendar;
using Agridea.DataRepository;
using Agridea.Diagnostics.Contracts;
using Agridea.Diagnostics.Logging;
using Agridea.Metadata;
using Agridea.News;
using Agridea.Security;
using Agridea.Service;
using Agridea.Web.UI;

namespace Agridea.Metadata
{
    public static class MetadataDomainModelContext 
    {
        #region Services
        public static void Configure(SqlServerContextBase context, DbModelBuilder modelBuilder)
        {
            #region MetadataEntity
            modelBuilder.Entity<MetadataEntity>()
                .ToTable(CodeGenerationHelper.GetTableName<MetadataEntity>());
            modelBuilder.Entity<MetadataEntity>()
                .HasKey(x => x.Id);
            modelBuilder.Entity<MetadataEntity>()
                .HasMany(x => x.MetadataFieldList)
                .WithRequired(x => x.MetadataEntity);
            modelBuilder.Entity<MetadataEntity>()
                .HasMany(x => x.MetadataNavigationPropertyList)
                .WithRequired(x => x.MetadataEntity);

            #endregion

     
            #region MetadataEntity-MetadataEntity-MetadataUsage
            modelBuilder.Entity<MetadataEntity>()
                .HasMany(x => x.UsingEntityList)
                .WithMany(x => x.UsedEntityList) 
                .Map(m => m.ToTable("MetadataUsage").MapLeftKey("UsedEntity_Id").MapRightKey("UsingEntity_Id"));
            #endregion

          
            #region MetadataField
            modelBuilder.Entity<MetadataField>()
                .ToTable(CodeGenerationHelper.GetTableName<MetadataField>());
            modelBuilder.Entity<MetadataField>()
                .HasKey(x => x.Id);
            modelBuilder.Entity<MetadataField>()
                .HasRequired(x => x.MetadataEntity) 
                .WithMany(x => x.MetadataFieldList);

            #endregion

          
            #region MetadataNavigationProperty
            modelBuilder.Entity<MetadataNavigationProperty>()
                .ToTable(CodeGenerationHelper.GetTableName<MetadataNavigationProperty>());
            modelBuilder.Entity<MetadataNavigationProperty>()
                .HasKey(x => x.Id);
            modelBuilder.Entity<MetadataNavigationProperty>()
                .HasRequired(x => x.MetadataEntity) 
                .WithMany(x => x.MetadataNavigationPropertyList);

            #endregion

          
        }
    	public static void AddForeignKeyIndexes(IList<NonUniqueIndex> indexes, SqlServerContextBase context)
    	{
            #region MetadataEntity
            //None(inheritance TPH or no *..{1,0..1} association or no index)
            #endregion

     
            #region MetadataField
            //indexes.Add(context.GetNonUniqueIndexFor<MetadataField>("MetadataEntity_Id"));

            #endregion

     
            #region MetadataNavigationProperty
            //indexes.Add(context.GetNonUniqueIndexFor<MetadataNavigationProperty>("MetadataEntity_Id"));

            #endregion

     
        }
        public static void AddUniqueConstraints(IList<UniqueIndex> uniqueConstraints, SqlServerContextBase context)
        {
            #region MetadataEntity
            //None(inheritance TPH or no discriminant)
            #endregion

     
            #region MetadataField
            //None(inheritance TPH or no discriminant)
            #endregion

     
            #region MetadataNavigationProperty
            //None(inheritance TPH or no discriminant)
            #endregion

     
        }
        #endregion

    }
}
