/////////////////////////////////////////////////////////////////////////////////
//                                                                             //
// <auto-generated>                                                            //
// Date=? Machine=? User=?                                                     //
// Copyright (c) 2010-2011 Agridea, All Rights Reserved                        //
// </auto-generated>                                                           //
//                                                                             //
/////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Data.SqlClient;
//using System.Data.Entity.SqlServer;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using System.Text;
using Agridea;
using Agridea.Calendar;
using Agridea.DataRepository;
using Agridea.Diagnostics.Contracts;
using Agridea.Diagnostics.Logging;
using Agridea.Metadata;
using Agridea.News;
using Agridea.Security;
using Agridea.Service;
using Agridea.Web.UI;

namespace Agridea.Metadata
{
    [Serializable]
    public partial class MetadataEntity : PocoBase, IEquatable<MetadataEntity>
    {
        #region Primitive Properties
        public virtual bool Dimension { get; set;}
        public virtual string Documentation { get; set;}
        public virtual byte[] FileContent { get; set;}
        public virtual string FileName { get; set;}
        public virtual string Guid { get; set;}
        public virtual string Name { get; set;}
        public virtual string Url { get; set;}

        #endregion

     
        #region Navigation Properties
    
        private IList<MetadataField> metadataFieldList_;
        public virtual IList<MetadataField> MetadataFieldList //MetadataEntity 1<==>* MetadataField
        {
            get { return metadataFieldList_ ?? (metadataFieldList_ = new List<MetadataField>()); }
            set { metadataFieldList_ = value;}
        }   
    
        private IList<MetadataNavigationProperty> metadataNavigationPropertyList_;
        public virtual IList<MetadataNavigationProperty> MetadataNavigationPropertyList //MetadataEntity 1<==>* MetadataNavigationProperty
        {
            get { return metadataNavigationPropertyList_ ?? (metadataNavigationPropertyList_ = new List<MetadataNavigationProperty>()); }
            set { metadataNavigationPropertyList_ = value;}
        }   
    
        private IList<MetadataEntity> usedEntityList_;
        public virtual IList<MetadataEntity> UsedEntityList //MetadataEntity *<==>* MetadataEntity
        {
            get { return usedEntityList_ ?? (usedEntityList_ = new List<MetadataEntity>()); }
            set { usedEntityList_ = value;}
        }   
    
        private IList<MetadataEntity> usingEntityList_;
        public virtual IList<MetadataEntity> UsingEntityList //MetadataEntity *<==>* MetadataEntity
        {
            get { return usingEntityList_ ?? (usingEntityList_ = new List<MetadataEntity>()); }
            set { usingEntityList_ = value;}
        }   

        #endregion

     
        #region Initialization
        public void CopyTo(MetadataEntity other)
        {
            other.Dimension = Dimension;
            other.Documentation = Documentation;
            other.FileContent = FileContent;
            other.FileName = FileName;
            other.Guid = Guid;
            other.Name = Name;
            other.Url = Url;
        }
        #endregion

     
        #region Identity
        public override string ToString()
        {
            return string.Format("[{0} Dimension='{1}' Documentation='{2}' FileContent='{3}' FileName='{4}' Guid='{5}' Name='{6}' Url='{7}' MetadataFieldList.Count='{8}' MetadataNavigationPropertyList.Count='{9}' UsedEntityList.Count='{10}' UsingEntityList.Count='{11}']",
                base.ToString(),
                Dimension,
                Documentation,
                FileContent,
                FileName,
                Guid,
                Name,
                Url,
                MetadataFieldList.Count,
                MetadataNavigationPropertyList.Count,
                UsedEntityList.Count,
                UsingEntityList.Count);
        }
        public override int GetHashCode() { return base.GetHashCode(); }
    	public string NaturalKey()
    	{ 
    	    return 
                "No natural Key";
        }
        public override bool Equals(object other)
        {
            return Equals(other as MetadataEntity);
        }
        public bool Equals(MetadataEntity other)
        {
            if (object.ReferenceEquals(other, null)) return false;
            if (object.ReferenceEquals(this, other)) return true;
            if (!Id.Equals(other.Id)) return false;
            if (!Id.Equals(0) && Id.Equals(other.Id)) return true;
            return false;
        } 

        #endregion

     
    }
}
