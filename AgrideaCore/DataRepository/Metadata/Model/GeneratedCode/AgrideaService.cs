/////////////////////////////////////////////////////////////////////////////////
//                                                                             //
// <auto-generated>                                                            //
// Date=? Machine=? User=?                                                     //
// Copyright (c) 2010-2011 Agridea, All Rights Reserved                        //
// </auto-generated>                                                           //
//                                                                             //
/////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Data.SqlClient;
//using System.Data.Entity.SqlServer;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using System.Text;
using Agridea;
using Agridea.Calendar;
using Agridea.DataRepository;
using Agridea.Diagnostics.Contracts;
using Agridea.Diagnostics.Logging;
using Agridea.Metadata;
using Agridea.News;
using Agridea.Security;
using Agridea.Service;
using Agridea.Web.UI;

namespace Agridea
{
    public partial class AgrideaService
    {
        #region Services
        #region GetByDiscriminants
        #endregion
    
        #region Insert/Update/Delete Sql commands
        public void SqlBulkCopy(IEnumerable<MetadataEntity> items)
        {
            using (var bulkCopy = new SqlBulkCopy(ConnectionString, SqlBulkCopyOptions.KeepIdentity |
                        SqlBulkCopyOptions.UseInternalTransaction |
                        SqlBulkCopyOptions.KeepNulls))
            {
    		    bulkCopy.BulkCopyTimeout = 0;
                bulkCopy.BatchSize = items.Count();
                bulkCopy.DestinationTableName = CodeGenerationHelper.GetTableName<MetadataEntity>();
                var table = new System.Data.DataTable();
    			
                table.Columns.Add("CreationDate");
                bulkCopy.ColumnMappings.Add("CreationDate", "CreationDate");  
                table.Columns.Add("CreatedBy");
                bulkCopy.ColumnMappings.Add("CreatedBy", "CreatedBy");  
                table.Columns.Add("ModificationDate");
                bulkCopy.ColumnMappings.Add("ModificationDate", "ModificationDate");  
                table.Columns.Add("ModifiedBy");
                bulkCopy.ColumnMappings.Add("ModifiedBy", "ModifiedBy");  
                table.Columns.Add("Dimension");
                bulkCopy.ColumnMappings.Add("Dimension", "Dimension");  
                table.Columns.Add("Documentation");
                bulkCopy.ColumnMappings.Add("Documentation", "Documentation");  
                table.Columns.Add("FileContent");
                bulkCopy.ColumnMappings.Add("FileContent", "FileContent");  
                table.Columns.Add("FileName");
                bulkCopy.ColumnMappings.Add("FileName", "FileName");  
                table.Columns.Add("Guid", typeof(Guid));
                bulkCopy.ColumnMappings.Add("Guid", "Guid");  
                table.Columns.Add("Name");
                bulkCopy.ColumnMappings.Add("Name", "Name");  
                table.Columns.Add("Url");
                bulkCopy.ColumnMappings.Add("Url", "Url");  
                foreach (var item in items) table.Rows.Add(new object[]{item.CreationDate,item.CreatedBy,item.ModificationDate,item.ModifiedBy,item.Dimension,item.Documentation,item.FileContent,item.FileName,item.Guid,item.Name,item.Url});
                bulkCopy.WriteToServer(table);
            }
        }
    	
        public void SqlBulkCopyWithId(IEnumerable<MetadataEntity> items)
        {
            using (var bulkCopy = new SqlBulkCopy(ConnectionString, SqlBulkCopyOptions.KeepIdentity |
                        SqlBulkCopyOptions.UseInternalTransaction |
                        SqlBulkCopyOptions.KeepNulls))
            {
    		    bulkCopy.BulkCopyTimeout = 0;
                bulkCopy.BatchSize = items.Count();
                bulkCopy.DestinationTableName = CodeGenerationHelper.GetTableName<MetadataEntity>();
                var table = new System.Data.DataTable();    
                table.Columns.Add("Id");
                bulkCopy.ColumnMappings.Add("Id", "Id");  
                table.Columns.Add("CreationDate");
                bulkCopy.ColumnMappings.Add("CreationDate", "CreationDate");  
                table.Columns.Add("CreatedBy");
                bulkCopy.ColumnMappings.Add("CreatedBy", "CreatedBy");  
                table.Columns.Add("ModificationDate");
                bulkCopy.ColumnMappings.Add("ModificationDate", "ModificationDate");  
                table.Columns.Add("ModifiedBy");
                bulkCopy.ColumnMappings.Add("ModifiedBy", "ModifiedBy");  
                table.Columns.Add("Dimension");
                bulkCopy.ColumnMappings.Add("Dimension", "Dimension");  
                table.Columns.Add("Documentation");
                bulkCopy.ColumnMappings.Add("Documentation", "Documentation");  
                table.Columns.Add("FileContent");
                bulkCopy.ColumnMappings.Add("FileContent", "FileContent");  
                table.Columns.Add("FileName");
                bulkCopy.ColumnMappings.Add("FileName", "FileName");  
                table.Columns.Add("Guid", typeof(Guid));
                bulkCopy.ColumnMappings.Add("Guid", "Guid");  
                table.Columns.Add("Name");
                bulkCopy.ColumnMappings.Add("Name", "Name");  
                table.Columns.Add("Url");
                bulkCopy.ColumnMappings.Add("Url", "Url");  
                foreach (var item in items) table.Rows.Add(new object[]{item.Id,item.CreationDate,item.CreatedBy,item.ModificationDate,item.ModifiedBy,item.Dimension,item.Documentation,item.FileContent,item.FileName,item.Guid,item.Name,item.Url});
                bulkCopy.WriteToServer(table);
            }
        }
        public void SqlInsert(IEnumerable<MetadataEntity> items) 
        {
            if(!items.Any()) return;
    
            StringBuilder commandStringBuilder = new StringBuilder();
            commandStringBuilder.AppendFormat("INSERT INTO [{0}].[{1}].[{2}]{3}", DataRepositoryHelper.DatabaseNameFor(ConnectionString), "dbo", CodeGenerationHelper.GetTableName<MetadataEntity>(), Environment.NewLine);
            commandStringBuilder.AppendFormat("{0}{1}","(CreationDate, CreatedBy, ModificationDate, ModifiedBy, Dimension, Documentation, FileContent, FileName, Guid, Name, Url)", Environment.NewLine);
            //Nav. property 'MetadataFieldList' is OneToMany => IGNORE
            //Nav. property 'MetadataNavigationPropertyList' is OneToMany => IGNORE
            //Nav. property 'UsedEntityList' is ManyToMany => IGNORE
            //Nav. property 'UsingEntityList' is ManyToMany => IGNORE
            commandStringBuilder.AppendFormat("VALUES{0}", Environment.NewLine);
            
            int rowCount = 0;
            var startTime = DateTime.Now;
            string separator = null;
            StringBuilder stringBuilder = new StringBuilder();
            
            foreach(var item in items)
            {
                if (rowCount % 1000 == 0)
                {
                    stringBuilder.Append(commandStringBuilder);
                    separator = null;
                }
                if(separator != null) stringBuilder.AppendLine(separator);
                stringBuilder.Append(string.Format("({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10})", SqlEncode(item.CreationDate), SqlEncode(item.CreatedBy), SqlEncode(item.ModificationDate), SqlEncode(item.ModifiedBy), SqlEncode(item.Dimension), SqlEncode(item.Documentation), SqlEncode(item.FileContent), SqlEncode(item.FileName), SqlEncode(item.Guid), SqlEncode(item.Name), SqlEncode(item.Url)));
                
                rowCount++;
                separator = ",";
            }
            
            string command = stringBuilder.ToString();
            try
            {
                Repository.ExecuteSqlCommand(command);
                Log.Verbose("Inserted {0} '{1}' duration {2}", rowCount, "MetadataEntity", DateTime.Now - startTime);
            }
            catch(Exception)
            {
                Log.Error(command);
                throw;
            }
        }
        public void SqlUpdate(IEnumerable<MetadataEntity> items) 
        {
            if(!items.Any()) return;
            
            StringBuilder stringBuilder = new StringBuilder();
            foreach(var item in items)
            {
                stringBuilder.AppendFormat("UPDATE sqltable{0}", Environment.NewLine);
                stringBuilder.AppendLine(string.Format("SET CreationDate={0}, CreatedBy={1}, ModificationDate={2}, ModifiedBy={3}, Dimension={4}, Documentation={5}, FileContent={6}, FileName={7}, Guid={8}, Name={9}, Url={10}", SqlEncode(item.CreationDate), SqlEncode(item.CreatedBy), SqlEncode(DateTime.Now), SqlEncode(UserName), SqlEncode(item.Dimension), SqlEncode(item.Documentation), SqlEncode(item.FileContent), SqlEncode(item.FileName), SqlEncode(item.Guid), SqlEncode(item.Name), SqlEncode(item.Url)));
                stringBuilder.AppendFormat("FROM [{0}].[{1}].[{2}] AS sqltable {3}", DataRepositoryHelper.DatabaseNameFor(ConnectionString), "dbo", CodeGenerationHelper.GetTableName<MetadataEntity>(), Environment.NewLine);
                stringBuilder.AppendFormat("WHERE sqltable.Id='{0}'{1}", item.Id, Environment.NewLine);
            }
    
            string command = stringBuilder.ToString();
            try
            {
                Repository.ExecuteSqlCommand(command);
            }
            catch(Exception)
            {
                Log.Error(command);
                throw;
            }
        }
        public void SqlDeleteMetadataUsage()
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendFormat("DELETE [{0}].[{1}].[{2}]{3}", DataRepositoryHelper.DatabaseNameFor(ConnectionString), "dbo", "MetadataUsage", Environment.NewLine);
            
            string command = stringBuilder.ToString();
            try
            {
                Repository.ExecuteSqlCommand(command);
            }
            catch(Exception)
            {
                Log.Error(command);
                throw;
            }
        }
        public void SqlInsertMetadataUsage(IList<Tuple<int,int>> idPairs)
        {
            if(!idPairs.Any()) return;
    
            StringBuilder commandStringBuilder = new StringBuilder();
            commandStringBuilder.AppendFormat("INSERT INTO [{0}].[{1}].[{2}]{3}", DataRepositoryHelper.DatabaseNameFor(ConnectionString), "dbo", "MetadataUsage", Environment.NewLine);
            commandStringBuilder.AppendFormat("({0}_Id,{1}_Id{2})", "UsedEntity", "UsingEntity", Environment.NewLine);
            commandStringBuilder.AppendFormat("VALUES{0}", Environment.NewLine);
            
            int rowCount = 0;
            var startTime = DateTime.Now;
            string separator = null;
            StringBuilder stringBuilder = new StringBuilder();
    
            foreach(var idPair in idPairs)
            {
                if (rowCount % 1000 == 0)
                {
                    stringBuilder.Append(commandStringBuilder);
                    separator = null;
                }
                if (separator != null) stringBuilder.AppendLine(separator);
                stringBuilder.Append(string.Format("({0},{1})", idPair.Item1, idPair.Item2));
                
                rowCount++;
                separator = ",";
            }
            
            string command = stringBuilder.ToString();
            try
            {
                Repository.ExecuteSqlCommand(command);
                Log.Verbose("Inserted {0} '{1}-{2}' duration {3}", rowCount, "MetadataEntity", "MetadataEntity", DateTime.Now - startTime);
            }
            catch(Exception)
            {
                Log.Error(command);
                throw;
            }
        }
        public void SqlBulkCopy(IEnumerable<MetadataField> items)
        {
            using (var bulkCopy = new SqlBulkCopy(ConnectionString, SqlBulkCopyOptions.KeepIdentity |
                        SqlBulkCopyOptions.UseInternalTransaction |
                        SqlBulkCopyOptions.KeepNulls))
            {
    		    bulkCopy.BulkCopyTimeout = 0;
                bulkCopy.BatchSize = items.Count();
                bulkCopy.DestinationTableName = CodeGenerationHelper.GetTableName<MetadataField>();
                var table = new System.Data.DataTable();
    			
                table.Columns.Add("CreationDate");
                bulkCopy.ColumnMappings.Add("CreationDate", "CreationDate");  
                table.Columns.Add("CreatedBy");
                bulkCopy.ColumnMappings.Add("CreatedBy", "CreatedBy");  
                table.Columns.Add("ModificationDate");
                bulkCopy.ColumnMappings.Add("ModificationDate", "ModificationDate");  
                table.Columns.Add("ModifiedBy");
                bulkCopy.ColumnMappings.Add("ModifiedBy", "ModifiedBy");  
                table.Columns.Add("Documentation");
                bulkCopy.ColumnMappings.Add("Documentation", "Documentation");  
                table.Columns.Add("Guid", typeof(Guid));
                bulkCopy.ColumnMappings.Add("Guid", "Guid");  
                table.Columns.Add("Name");
                bulkCopy.ColumnMappings.Add("Name", "Name");  
                table.Columns.Add("Type");
                bulkCopy.ColumnMappings.Add("Type", "Type");  
                table.Columns.Add("MetadataEntity_Id");
                bulkCopy.ColumnMappings.Add("MetadataEntity_Id", "MetadataEntity_Id");  
                foreach (var item in items) table.Rows.Add(new object[]{item.CreationDate,item.CreatedBy,item.ModificationDate,item.ModifiedBy,item.Documentation,item.Guid,item.Name,item.Type,item.MetadataEntity == null ? null : item.MetadataEntity.Id as int ?});
                bulkCopy.WriteToServer(table);
            }
        }
    	
        public void SqlBulkCopyWithId(IEnumerable<MetadataField> items)
        {
            using (var bulkCopy = new SqlBulkCopy(ConnectionString, SqlBulkCopyOptions.KeepIdentity |
                        SqlBulkCopyOptions.UseInternalTransaction |
                        SqlBulkCopyOptions.KeepNulls))
            {
    		    bulkCopy.BulkCopyTimeout = 0;
                bulkCopy.BatchSize = items.Count();
                bulkCopy.DestinationTableName = CodeGenerationHelper.GetTableName<MetadataField>();
                var table = new System.Data.DataTable();    
                table.Columns.Add("Id");
                bulkCopy.ColumnMappings.Add("Id", "Id");  
                table.Columns.Add("CreationDate");
                bulkCopy.ColumnMappings.Add("CreationDate", "CreationDate");  
                table.Columns.Add("CreatedBy");
                bulkCopy.ColumnMappings.Add("CreatedBy", "CreatedBy");  
                table.Columns.Add("ModificationDate");
                bulkCopy.ColumnMappings.Add("ModificationDate", "ModificationDate");  
                table.Columns.Add("ModifiedBy");
                bulkCopy.ColumnMappings.Add("ModifiedBy", "ModifiedBy");  
                table.Columns.Add("Documentation");
                bulkCopy.ColumnMappings.Add("Documentation", "Documentation");  
                table.Columns.Add("Guid", typeof(Guid));
                bulkCopy.ColumnMappings.Add("Guid", "Guid");  
                table.Columns.Add("Name");
                bulkCopy.ColumnMappings.Add("Name", "Name");  
                table.Columns.Add("Type");
                bulkCopy.ColumnMappings.Add("Type", "Type");  
                table.Columns.Add("MetadataEntity_Id");
                bulkCopy.ColumnMappings.Add("MetadataEntity_Id", "MetadataEntity_Id");  
                foreach (var item in items) table.Rows.Add(new object[]{item.Id,item.CreationDate,item.CreatedBy,item.ModificationDate,item.ModifiedBy,item.Documentation,item.Guid,item.Name,item.Type,item.MetadataEntity == null ? null : item.MetadataEntity.Id as int ?});
                bulkCopy.WriteToServer(table);
            }
        }
        public void SqlInsert(IEnumerable<MetadataField> items) 
        {
            if(!items.Any()) return;
    
            StringBuilder commandStringBuilder = new StringBuilder();
            commandStringBuilder.AppendFormat("INSERT INTO [{0}].[{1}].[{2}]{3}", DataRepositoryHelper.DatabaseNameFor(ConnectionString), "dbo", CodeGenerationHelper.GetTableName<MetadataField>(), Environment.NewLine);
            commandStringBuilder.AppendFormat("{0}{1}","(CreationDate, CreatedBy, ModificationDate, ModifiedBy, Documentation, Guid, Name, Type, MetadataEntity_Id)", Environment.NewLine);
            commandStringBuilder.AppendFormat("VALUES{0}", Environment.NewLine);
            
            int rowCount = 0;
            var startTime = DateTime.Now;
            string separator = null;
            StringBuilder stringBuilder = new StringBuilder();
            
            foreach(var item in items)
            {
                if (rowCount % 1000 == 0)
                {
                    stringBuilder.Append(commandStringBuilder);
                    separator = null;
                }
                if(separator != null) stringBuilder.AppendLine(separator);
                stringBuilder.Append(string.Format("({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8})", SqlEncode(item.CreationDate), SqlEncode(item.CreatedBy), SqlEncode(item.ModificationDate), SqlEncode(item.ModifiedBy), SqlEncode(item.Documentation), SqlEncode(item.Guid), SqlEncode(item.Name), SqlEncode(item.Type), SqlEncodeId(item.MetadataEntity)));
                
                rowCount++;
                separator = ",";
            }
            
            string command = stringBuilder.ToString();
            try
            {
                Repository.ExecuteSqlCommand(command);
                Log.Verbose("Inserted {0} '{1}' duration {2}", rowCount, "MetadataField", DateTime.Now - startTime);
            }
            catch(Exception)
            {
                Log.Error(command);
                throw;
            }
        }
        public void SqlUpdate(IEnumerable<MetadataField> items) 
        {
            if(!items.Any()) return;
            
            StringBuilder stringBuilder = new StringBuilder();
            foreach(var item in items)
            {
                stringBuilder.AppendFormat("UPDATE sqltable{0}", Environment.NewLine);
                stringBuilder.AppendLine(string.Format("SET CreationDate={0}, CreatedBy={1}, ModificationDate={2}, ModifiedBy={3}, Documentation={4}, Guid={5}, Name={6}, Type={7}, MetadataEntity_Id={8}", SqlEncode(item.CreationDate), SqlEncode(item.CreatedBy), SqlEncode(DateTime.Now), SqlEncode(UserName), SqlEncode(item.Documentation), SqlEncode(item.Guid), SqlEncode(item.Name), SqlEncode(item.Type), SqlEncodeId(item.MetadataEntity)));
                stringBuilder.AppendFormat("FROM [{0}].[{1}].[{2}] AS sqltable {3}", DataRepositoryHelper.DatabaseNameFor(ConnectionString), "dbo", CodeGenerationHelper.GetTableName<MetadataField>(), Environment.NewLine);
                stringBuilder.AppendFormat("WHERE sqltable.Id='{0}'{1}", item.Id, Environment.NewLine);
            }
    
            string command = stringBuilder.ToString();
            try
            {
                Repository.ExecuteSqlCommand(command);
            }
            catch(Exception)
            {
                Log.Error(command);
                throw;
            }
        }
        public void SqlBulkCopy(IEnumerable<MetadataNavigationProperty> items)
        {
            using (var bulkCopy = new SqlBulkCopy(ConnectionString, SqlBulkCopyOptions.KeepIdentity |
                        SqlBulkCopyOptions.UseInternalTransaction |
                        SqlBulkCopyOptions.KeepNulls))
            {
    		    bulkCopy.BulkCopyTimeout = 0;
                bulkCopy.BatchSize = items.Count();
                bulkCopy.DestinationTableName = CodeGenerationHelper.GetTableName<MetadataNavigationProperty>();
                var table = new System.Data.DataTable();
    			
                table.Columns.Add("CreationDate");
                bulkCopy.ColumnMappings.Add("CreationDate", "CreationDate");  
                table.Columns.Add("CreatedBy");
                bulkCopy.ColumnMappings.Add("CreatedBy", "CreatedBy");  
                table.Columns.Add("ModificationDate");
                bulkCopy.ColumnMappings.Add("ModificationDate", "ModificationDate");  
                table.Columns.Add("ModifiedBy");
                bulkCopy.ColumnMappings.Add("ModifiedBy", "ModifiedBy");  
                table.Columns.Add("Documentation");
                bulkCopy.ColumnMappings.Add("Documentation", "Documentation");  
                table.Columns.Add("FromMultiplicity_");
                bulkCopy.ColumnMappings.Add("FromMultiplicity_", "FromMultiplicity_");  
                table.Columns.Add("Guid", typeof(Guid));
                bulkCopy.ColumnMappings.Add("Guid", "Guid");  
                table.Columns.Add("Name");
                bulkCopy.ColumnMappings.Add("Name", "Name");  
                table.Columns.Add("ToMultiplicity_");
                bulkCopy.ColumnMappings.Add("ToMultiplicity_", "ToMultiplicity_");  
                table.Columns.Add("Type");
                bulkCopy.ColumnMappings.Add("Type", "Type");  
                table.Columns.Add("MetadataEntity_Id");
                bulkCopy.ColumnMappings.Add("MetadataEntity_Id", "MetadataEntity_Id");  
                foreach (var item in items) table.Rows.Add(new object[]{item.CreationDate,item.CreatedBy,item.ModificationDate,item.ModifiedBy,item.Documentation,item.FromMultiplicity_,item.Guid,item.Name,item.ToMultiplicity_,item.Type,item.MetadataEntity == null ? null : item.MetadataEntity.Id as int ?});
                bulkCopy.WriteToServer(table);
            }
        }
    	
        public void SqlBulkCopyWithId(IEnumerable<MetadataNavigationProperty> items)
        {
            using (var bulkCopy = new SqlBulkCopy(ConnectionString, SqlBulkCopyOptions.KeepIdentity |
                        SqlBulkCopyOptions.UseInternalTransaction |
                        SqlBulkCopyOptions.KeepNulls))
            {
    		    bulkCopy.BulkCopyTimeout = 0;
                bulkCopy.BatchSize = items.Count();
                bulkCopy.DestinationTableName = CodeGenerationHelper.GetTableName<MetadataNavigationProperty>();
                var table = new System.Data.DataTable();    
                table.Columns.Add("Id");
                bulkCopy.ColumnMappings.Add("Id", "Id");  
                table.Columns.Add("CreationDate");
                bulkCopy.ColumnMappings.Add("CreationDate", "CreationDate");  
                table.Columns.Add("CreatedBy");
                bulkCopy.ColumnMappings.Add("CreatedBy", "CreatedBy");  
                table.Columns.Add("ModificationDate");
                bulkCopy.ColumnMappings.Add("ModificationDate", "ModificationDate");  
                table.Columns.Add("ModifiedBy");
                bulkCopy.ColumnMappings.Add("ModifiedBy", "ModifiedBy");  
                table.Columns.Add("Documentation");
                bulkCopy.ColumnMappings.Add("Documentation", "Documentation");  
                table.Columns.Add("FromMultiplicity_");
                bulkCopy.ColumnMappings.Add("FromMultiplicity_", "FromMultiplicity_");  
                table.Columns.Add("Guid", typeof(Guid));
                bulkCopy.ColumnMappings.Add("Guid", "Guid");  
                table.Columns.Add("Name");
                bulkCopy.ColumnMappings.Add("Name", "Name");  
                table.Columns.Add("ToMultiplicity_");
                bulkCopy.ColumnMappings.Add("ToMultiplicity_", "ToMultiplicity_");  
                table.Columns.Add("Type");
                bulkCopy.ColumnMappings.Add("Type", "Type");  
                table.Columns.Add("MetadataEntity_Id");
                bulkCopy.ColumnMappings.Add("MetadataEntity_Id", "MetadataEntity_Id");  
                foreach (var item in items) table.Rows.Add(new object[]{item.Id,item.CreationDate,item.CreatedBy,item.ModificationDate,item.ModifiedBy,item.Documentation,item.FromMultiplicity_,item.Guid,item.Name,item.ToMultiplicity_,item.Type,item.MetadataEntity == null ? null : item.MetadataEntity.Id as int ?});
                bulkCopy.WriteToServer(table);
            }
        }
        public void SqlInsert(IEnumerable<MetadataNavigationProperty> items) 
        {
            if(!items.Any()) return;
    
            StringBuilder commandStringBuilder = new StringBuilder();
            commandStringBuilder.AppendFormat("INSERT INTO [{0}].[{1}].[{2}]{3}", DataRepositoryHelper.DatabaseNameFor(ConnectionString), "dbo", CodeGenerationHelper.GetTableName<MetadataNavigationProperty>(), Environment.NewLine);
            commandStringBuilder.AppendFormat("{0}{1}","(CreationDate, CreatedBy, ModificationDate, ModifiedBy, Documentation, FromMultiplicity_, Guid, Name, ToMultiplicity_, Type, MetadataEntity_Id)", Environment.NewLine);
            commandStringBuilder.AppendFormat("VALUES{0}", Environment.NewLine);
            
            int rowCount = 0;
            var startTime = DateTime.Now;
            string separator = null;
            StringBuilder stringBuilder = new StringBuilder();
            
            foreach(var item in items)
            {
                if (rowCount % 1000 == 0)
                {
                    stringBuilder.Append(commandStringBuilder);
                    separator = null;
                }
                if(separator != null) stringBuilder.AppendLine(separator);
                stringBuilder.Append(string.Format("({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10})", SqlEncode(item.CreationDate), SqlEncode(item.CreatedBy), SqlEncode(item.ModificationDate), SqlEncode(item.ModifiedBy), SqlEncode(item.Documentation), SqlEncode(item.FromMultiplicity_), SqlEncode(item.Guid), SqlEncode(item.Name), SqlEncode(item.ToMultiplicity_), SqlEncode(item.Type), SqlEncodeId(item.MetadataEntity)));
                
                rowCount++;
                separator = ",";
            }
            
            string command = stringBuilder.ToString();
            try
            {
                Repository.ExecuteSqlCommand(command);
                Log.Verbose("Inserted {0} '{1}' duration {2}", rowCount, "MetadataNavigationProperty", DateTime.Now - startTime);
            }
            catch(Exception)
            {
                Log.Error(command);
                throw;
            }
        }
        public void SqlUpdate(IEnumerable<MetadataNavigationProperty> items) 
        {
            if(!items.Any()) return;
            
            StringBuilder stringBuilder = new StringBuilder();
            foreach(var item in items)
            {
                stringBuilder.AppendFormat("UPDATE sqltable{0}", Environment.NewLine);
                stringBuilder.AppendLine(string.Format("SET CreationDate={0}, CreatedBy={1}, ModificationDate={2}, ModifiedBy={3}, Documentation={4}, FromMultiplicity_={5}, Guid={6}, Name={7}, ToMultiplicity_={8}, Type={9}, MetadataEntity_Id={10}", SqlEncode(item.CreationDate), SqlEncode(item.CreatedBy), SqlEncode(DateTime.Now), SqlEncode(UserName), SqlEncode(item.Documentation), SqlEncode(item.FromMultiplicity_), SqlEncode(item.Guid), SqlEncode(item.Name), SqlEncode(item.ToMultiplicity_), SqlEncode(item.Type), SqlEncodeId(item.MetadataEntity)));
                stringBuilder.AppendFormat("FROM [{0}].[{1}].[{2}] AS sqltable {3}", DataRepositoryHelper.DatabaseNameFor(ConnectionString), "dbo", CodeGenerationHelper.GetTableName<MetadataNavigationProperty>(), Environment.NewLine);
                stringBuilder.AppendFormat("WHERE sqltable.Id='{0}'{1}", item.Id, Environment.NewLine);
            }
    
            string command = stringBuilder.ToString();
            try
            {
                Repository.ExecuteSqlCommand(command);
            }
            catch(Exception)
            {
                Log.Error(command);
                throw;
            }
        }
        #endregion
    
        #region CascadeRemove
        public virtual void CascadeRemove(MetadataEntity item)
        {
            Requires<InvalidKeyException>.GreaterThan(item.Id, 0);
            Log.Verbose("CascadeRemove({0})", item.ToString());
    		//1==>X
            //1<==>X
            CascadeRemoveRange(item.MetadataFieldList); //1<==>N
            CascadeRemoveRange(item.MetadataNavigationPropertyList); //1<==>N
            base.CascadeRemove(item);
        }
        public virtual void CascadeRemoveRange(IList<MetadataEntity> items)
        {
            foreach(var item in items.ToArray()) CascadeRemove(item);
        }
        public virtual void CascadeRemove(MetadataField item)
        {
            Requires<InvalidKeyException>.GreaterThan(item.Id, 0);
            Log.Verbose("CascadeRemove({0})", item.ToString());
    		//1==>X
            //1<==>X
            base.CascadeRemove(item);
        }
        public virtual void CascadeRemoveRange(IList<MetadataField> items)
        {
            foreach(var item in items.ToArray()) CascadeRemove(item);
        }
        public virtual void CascadeRemove(MetadataNavigationProperty item)
        {
            Requires<InvalidKeyException>.GreaterThan(item.Id, 0);
            Log.Verbose("CascadeRemove({0})", item.ToString());
    		//1==>X
            //1<==>X
            base.CascadeRemove(item);
        }
        public virtual void CascadeRemoveRange(IList<MetadataNavigationProperty> items)
        {
            foreach(var item in items.ToArray()) CascadeRemove(item);
        }
        #endregion
        #endregion
     
    }
}
