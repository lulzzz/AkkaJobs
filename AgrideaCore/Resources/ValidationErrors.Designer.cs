//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Agridea.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class ValidationErrors {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal ValidationErrors() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Agridea.Resources.ValidationErrors", typeof(ValidationErrors).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {PropertyName} doit être unique.
        /// </summary>
        public static string BeUniqueError {
            get {
                return ResourceManager.GetString("BeUniqueError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{PropertyName}&apos; n&apos;est pas une adresse email valide..
        /// </summary>
        public static string email_error {
            get {
                return ResourceManager.GetString("email_error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{PropertyName}&apos; doit être égal à &apos;{ComparisonValue}&apos;..
        /// </summary>
        public static string equal_error {
            get {
                return ResourceManager.GetString("equal_error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{PropertyName}&apos; doit être plus grand que &apos;{ComparisonValue}&apos;..
        /// </summary>
        public static string greaterthan_error {
            get {
                return ResourceManager.GetString("greaterthan_error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{PropertyName}&apos; doit être plus grand ou égal à &apos;{ComparisonValue}&apos;..
        /// </summary>
        public static string greaterthanorequal_error {
            get {
                return ResourceManager.GetString("greaterthanorequal_error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{PropertyName}&apos; doit contenir entre {MinLength} et {MaxLength} caractères. {TotalLength} caractères ont été saisis..
        /// </summary>
        public static string length_error {
            get {
                return ResourceManager.GetString("length_error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {PropertyName}&lt;={PropertyToCompare}.
        /// </summary>
        public static string LessOrEqualsError {
            get {
                return ResourceManager.GetString("LessOrEqualsError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{PropertyName}&apos; doit être plus petit que &apos;{ComparisonValue}&apos;..
        /// </summary>
        public static string lessthan_error {
            get {
                return ResourceManager.GetString("lessthan_error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{PropertyName}&apos; doit être plus petit ou égal à &apos;{ComparisonValue}&apos;..
        /// </summary>
        public static string lessthanorequal_error {
            get {
                return ResourceManager.GetString("lessthanorequal_error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {PropertyName}&lt;={Value}.
        /// </summary>
        public static string MaximumIntegerValueError {
            get {
                return ResourceManager.GetString("MaximumIntegerValueError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {PropertyName}&gt;={Value}.
        /// </summary>
        public static string MinimumIntegerValueError {
            get {
                return ResourceManager.GetString("MinimumIntegerValueError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {PropertyName}=0 seulement si {PropertyToCompare}=0.
        /// </summary>
        public static string NonZeroDependentIntegerValuesError {
            get {
                return ResourceManager.GetString("NonZeroDependentIntegerValuesError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{PropertyName}&apos; ne doit pas être vide..
        /// </summary>
        public static string notempty_error {
            get {
                return ResourceManager.GetString("notempty_error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{PropertyName}&apos; ne doit pas être égal à &apos;{ComparisonValue}&apos;..
        /// </summary>
        public static string notequal_error {
            get {
                return ResourceManager.GetString("notequal_error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{PropertyName}&apos; ne doit pas avoir la valeur null..
        /// </summary>
        public static string notnull_error {
            get {
                return ResourceManager.GetString("notnull_error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {PropertyName} défini si {PropertyToCompare}&gt;0.
        /// </summary>
        public static string NotNullIfNotZeroError {
            get {
                return ResourceManager.GetString("NotNullIfNotZeroError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {PropertyName}&gt;0 si {PropertyToCompare} défini.
        /// </summary>
        public static string NotZeroIfNotNullError {
            get {
                return ResourceManager.GetString("NotZeroIfNotNullError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{PropertyName}&apos; doit être un coefficient compris entre 0 et 1..
        /// </summary>
        public static string PercentError {
            get {
                return ResourceManager.GetString("PercentError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{PropertyName}&apos; ne respecte pas la condition fixée..
        /// </summary>
        public static string predicate_error {
            get {
                return ResourceManager.GetString("predicate_error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{PropertyName}&apos; doit être un prix positif ou nul..
        /// </summary>
        public static string PriceError {
            get {
                return ResourceManager.GetString("PriceError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{PropertyName}&apos; n&apos;a pas le bon format..
        /// </summary>
        public static string regex_error {
            get {
                return ResourceManager.GetString("regex_error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {PropertyName}=Somme({PropertyList})={PropertyValue}.
        /// </summary>
        public static string TotalIntegerValuesError {
            get {
                return ResourceManager.GetString("TotalIntegerValuesError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Somme({PropertyList})&gt;={Value}.
        /// </summary>
        public static string TotalMinimumIntegerValuesError {
            get {
                return ResourceManager.GetString("TotalMinimumIntegerValuesError", resourceCulture);
            }
        }
    }
}
