/////////////////////////////////////////////////////////////////////////////////
//                                                                             //
// <auto-generated>                                                            //
// Date=? Machine=? User=?                                                     //
// Copyright (c) 2010-2011 Agridea, All Rights Reserved                        //
// </auto-generated>                                                           //
//                                                                             //
/////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Data.SqlClient;
//using System.Data.Entity.SqlServer;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using System.Text;
using Agridea;
using Agridea.Calendar;
using Agridea.DataRepository;
using Agridea.Diagnostics.Contracts;
using Agridea.Diagnostics.Logging;
using Agridea.Metadata;
using Agridea.News;
using Agridea.Security;
using Agridea.Service;
using Agridea.Web.UI;

namespace Agridea.Security
{
    public static class SecurityDomainModelContext 
    {
        #region Services
        public static void Configure(SqlServerContextBase context, DbModelBuilder modelBuilder)
        {
            #region Permission
            modelBuilder.Entity<Permission>()
                .ToTable(CodeGenerationHelper.GetTableName<Permission>());
            modelBuilder.Entity<Permission>()
                .HasKey(x => x.Id);
            modelBuilder.Entity<Permission>()
                .HasRequired(x => x.Role) 
                .WithMany(x => x.PermissionList);

            #endregion

          
            #region Role
            modelBuilder.Entity<Role>()
                .ToTable(CodeGenerationHelper.GetTableName<Role>());
            modelBuilder.Entity<Role>()
                .HasKey(x => x.Id);
            modelBuilder.Entity<Role>()
                .HasMany(x => x.PermissionList)
                .WithRequired(x => x.Role);
            modelBuilder.Entity<Role>()
                .HasMany(x => x.UserRoleList)
                .WithRequired(x => x.Role);

            #endregion

          
            #region User
            modelBuilder.Entity<User>()
                .ToTable(CodeGenerationHelper.GetTableName<User>());
            modelBuilder.Entity<User>()
                .HasKey(x => x.Id);
            modelBuilder.Entity<User>()
                .HasMany(x => x.UserRoleList)
                .WithRequired(x => x.User);

            #endregion

          
            #region UserRole
            modelBuilder.Entity<UserRole>()
                .ToTable(CodeGenerationHelper.GetTableName<UserRole>());
            modelBuilder.Entity<UserRole>()
                .HasKey(x => x.Id);
            modelBuilder.Entity<UserRole>()
                .HasRequired(x => x.Role) 
                .WithMany(x => x.UserRoleList);
            modelBuilder.Entity<UserRole>()
                .HasRequired(x => x.User) 
                .WithMany(x => x.UserRoleList);

            #endregion

          
        }
    	public static void AddForeignKeyIndexes(IList<NonUniqueIndex> indexes, SqlServerContextBase context)
    	{
            #region Permission
            //indexes.Add(context.GetNonUniqueIndexFor<Permission>("Role_Id"));

            #endregion

     
            #region Role
            //None(inheritance TPH or no *..{1,0..1} association or no index)
            #endregion

     
            #region User
            //None(inheritance TPH or no *..{1,0..1} association or no index)
            #endregion

     
            #region UserRole
            //indexes.Add(context.GetNonUniqueIndexFor<UserRole>("Role_Id"));
            //indexes.Add(context.GetNonUniqueIndexFor<UserRole>("User_Id"));

            #endregion

     
        }
        public static void AddUniqueConstraints(IList<UniqueIndex> uniqueConstraints, SqlServerContextBase context)
        {
            #region Permission
            uniqueConstraints.Add(context.GetUniqueIndexFor<Permission>("ItemName", "Role_Id"));

            #endregion

     
            #region Role
            uniqueConstraints.Add(context.GetUniqueIndexFor<Role>("Name"));

            #endregion

     
            #region User
            uniqueConstraints.Add(context.GetUniqueIndexFor<User>("UserName"));

            #endregion

     
            #region UserRole
            uniqueConstraints.Add(context.GetUniqueIndexFor<UserRole>("Role_Id", "User_Id"));

            #endregion

     
        }
        #endregion

    }
}
