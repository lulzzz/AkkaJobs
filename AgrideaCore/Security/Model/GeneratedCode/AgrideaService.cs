/////////////////////////////////////////////////////////////////////////////////
//                                                                             //
// <auto-generated>                                                            //
// Date=? Machine=? User=?                                                     //
// Copyright (c) 2010-2011 Agridea, All Rights Reserved                        //
// </auto-generated>                                                           //
//                                                                             //
/////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Data.SqlClient;
//using System.Data.Entity.SqlServer;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using System.Text;
using Agridea;
using Agridea.Calendar;
using Agridea.DataRepository;
using Agridea.Diagnostics.Contracts;
using Agridea.Diagnostics.Logging;
using Agridea.Metadata;
using Agridea.News;
using Agridea.Security;
using Agridea.Service;
using Agridea.Web.UI;

namespace Agridea
{
    public partial class AgrideaService
    {
        #region Services
        #region GetByDiscriminants
        public Permission GetByDiscriminants(Permission item) 
        {
            return Repository.All<Permission>().FirstOrDefault(m =>
                m.ItemName == item.ItemName &&
                m.Role.Name == item.Role.Name);
        }
        public Permission GetByDiscriminants(Permission item, IList<Permission> existingItems)
        {
            return existingItems.FirstOrDefault(m =>
                m.ItemName == item.ItemName &&
                m.Role.Name == item.Role.Name);
        }
        public Role GetByDiscriminants(Role item) 
        {
            return Repository.All<Role>().FirstOrDefault(m =>
                m.Name == item.Name);
        }
        public Role GetByDiscriminants(Role item, IList<Role> existingItems)
        {
            return existingItems.FirstOrDefault(m =>
                m.Name == item.Name);
        }
        public User GetByDiscriminants(User item) 
        {
            return Repository.All<User>().FirstOrDefault(m =>
                m.UserName == item.UserName);
        }
        public User GetByDiscriminants(User item, IList<User> existingItems)
        {
            return existingItems.FirstOrDefault(m =>
                m.UserName == item.UserName);
        }
        public UserRole GetByDiscriminants(UserRole item) 
        {
            return Repository.All<UserRole>().FirstOrDefault(m =>
                m.Role.Name == item.Role.Name &&
                m.User.UserName == item.User.UserName);
        }
        public UserRole GetByDiscriminants(UserRole item, IList<UserRole> existingItems)
        {
            return existingItems.FirstOrDefault(m =>
                m.Role.Name == item.Role.Name &&
                m.User.UserName == item.User.UserName);
        }
        #endregion
    
        #region Insert/Update/Delete Sql commands
        public void SqlBulkCopy(IEnumerable<Permission> items)
        {
            using (var bulkCopy = new SqlBulkCopy(ConnectionString, SqlBulkCopyOptions.KeepIdentity |
                        SqlBulkCopyOptions.UseInternalTransaction |
                        SqlBulkCopyOptions.KeepNulls))
            {
    		    bulkCopy.BulkCopyTimeout = 0;
                bulkCopy.BatchSize = items.Count();
                bulkCopy.DestinationTableName = CodeGenerationHelper.GetTableName<Permission>();
                var table = new System.Data.DataTable();
    			
                table.Columns.Add("CreationDate");
                bulkCopy.ColumnMappings.Add("CreationDate", "CreationDate");  
                table.Columns.Add("CreatedBy");
                bulkCopy.ColumnMappings.Add("CreatedBy", "CreatedBy");  
                table.Columns.Add("ModificationDate");
                bulkCopy.ColumnMappings.Add("ModificationDate", "ModificationDate");  
                table.Columns.Add("ModifiedBy");
                bulkCopy.ColumnMappings.Add("ModifiedBy", "ModifiedBy");  
                table.Columns.Add("Description");
                bulkCopy.ColumnMappings.Add("Description", "Description");  
                table.Columns.Add("ItemName");
                bulkCopy.ColumnMappings.Add("ItemName", "ItemName");  
                table.Columns.Add("Role_Id");
                bulkCopy.ColumnMappings.Add("Role_Id", "Role_Id");  
                foreach (var item in items) table.Rows.Add(new object[]{item.CreationDate,item.CreatedBy,item.ModificationDate,item.ModifiedBy,item.Description,item.ItemName,item.Role == null ? null : item.Role.Id as int ?});
                bulkCopy.WriteToServer(table);
            }
        }
    	
        public void SqlBulkCopyWithId(IEnumerable<Permission> items)
        {
            using (var bulkCopy = new SqlBulkCopy(ConnectionString, SqlBulkCopyOptions.KeepIdentity |
                        SqlBulkCopyOptions.UseInternalTransaction |
                        SqlBulkCopyOptions.KeepNulls))
            {
    		    bulkCopy.BulkCopyTimeout = 0;
                bulkCopy.BatchSize = items.Count();
                bulkCopy.DestinationTableName = CodeGenerationHelper.GetTableName<Permission>();
                var table = new System.Data.DataTable();    
                table.Columns.Add("Id");
                bulkCopy.ColumnMappings.Add("Id", "Id");  
                table.Columns.Add("CreationDate");
                bulkCopy.ColumnMappings.Add("CreationDate", "CreationDate");  
                table.Columns.Add("CreatedBy");
                bulkCopy.ColumnMappings.Add("CreatedBy", "CreatedBy");  
                table.Columns.Add("ModificationDate");
                bulkCopy.ColumnMappings.Add("ModificationDate", "ModificationDate");  
                table.Columns.Add("ModifiedBy");
                bulkCopy.ColumnMappings.Add("ModifiedBy", "ModifiedBy");  
                table.Columns.Add("Description");
                bulkCopy.ColumnMappings.Add("Description", "Description");  
                table.Columns.Add("ItemName");
                bulkCopy.ColumnMappings.Add("ItemName", "ItemName");  
                table.Columns.Add("Role_Id");
                bulkCopy.ColumnMappings.Add("Role_Id", "Role_Id");  
                foreach (var item in items) table.Rows.Add(new object[]{item.Id,item.CreationDate,item.CreatedBy,item.ModificationDate,item.ModifiedBy,item.Description,item.ItemName,item.Role == null ? null : item.Role.Id as int ?});
                bulkCopy.WriteToServer(table);
            }
        }
        public void SqlInsert(IEnumerable<Permission> items) 
        {
            if(!items.Any()) return;
    
            StringBuilder commandStringBuilder = new StringBuilder();
            commandStringBuilder.AppendFormat("INSERT INTO [{0}].[{1}].[{2}]{3}", DataRepositoryHelper.DatabaseNameFor(ConnectionString), "dbo", CodeGenerationHelper.GetTableName<Permission>(), Environment.NewLine);
            commandStringBuilder.AppendFormat("{0}{1}","(CreationDate, CreatedBy, ModificationDate, ModifiedBy, Description, ItemName, Role_Id)", Environment.NewLine);
            commandStringBuilder.AppendFormat("VALUES{0}", Environment.NewLine);
            
            int rowCount = 0;
            var startTime = DateTime.Now;
            string separator = null;
            StringBuilder stringBuilder = new StringBuilder();
            
            foreach(var item in items)
            {
                if (rowCount % 1000 == 0)
                {
                    stringBuilder.Append(commandStringBuilder);
                    separator = null;
                }
                if(separator != null) stringBuilder.AppendLine(separator);
                stringBuilder.Append(string.Format("({0}, {1}, {2}, {3}, {4}, {5}, {6})", SqlEncode(item.CreationDate), SqlEncode(item.CreatedBy), SqlEncode(item.ModificationDate), SqlEncode(item.ModifiedBy), SqlEncode(item.Description), SqlEncode(item.ItemName), SqlEncodeId(item.Role)));
                
                rowCount++;
                separator = ",";
            }
            
            string command = stringBuilder.ToString();
            try
            {
                Repository.ExecuteSqlCommand(command);
                Log.Verbose("Inserted {0} '{1}' duration {2}", rowCount, "Permission", DateTime.Now - startTime);
            }
            catch(Exception)
            {
                Log.Error(command);
                throw;
            }
        }
        public void SqlUpdate(IEnumerable<Permission> items) 
        {
            if(!items.Any()) return;
            
            StringBuilder stringBuilder = new StringBuilder();
            foreach(var item in items)
            {
                stringBuilder.AppendFormat("UPDATE sqltable{0}", Environment.NewLine);
                stringBuilder.AppendLine(string.Format("SET CreationDate={0}, CreatedBy={1}, ModificationDate={2}, ModifiedBy={3}, Description={4}, ItemName={5}, Role_Id={6}", SqlEncode(item.CreationDate), SqlEncode(item.CreatedBy), SqlEncode(DateTime.Now), SqlEncode(UserName), SqlEncode(item.Description), SqlEncode(item.ItemName), SqlEncodeId(item.Role)));
                stringBuilder.AppendFormat("FROM [{0}].[{1}].[{2}] AS sqltable {3}", DataRepositoryHelper.DatabaseNameFor(ConnectionString), "dbo", CodeGenerationHelper.GetTableName<Permission>(), Environment.NewLine);
                stringBuilder.AppendFormat("WHERE sqltable.Id='{0}'{1}", item.Id, Environment.NewLine);
            }
    
            string command = stringBuilder.ToString();
            try
            {
                Repository.ExecuteSqlCommand(command);
            }
            catch(Exception)
            {
                Log.Error(command);
                throw;
            }
        }
        public void SqlBulkCopy(IEnumerable<Role> items)
        {
            using (var bulkCopy = new SqlBulkCopy(ConnectionString, SqlBulkCopyOptions.KeepIdentity |
                        SqlBulkCopyOptions.UseInternalTransaction |
                        SqlBulkCopyOptions.KeepNulls))
            {
    		    bulkCopy.BulkCopyTimeout = 0;
                bulkCopy.BatchSize = items.Count();
                bulkCopy.DestinationTableName = CodeGenerationHelper.GetTableName<Role>();
                var table = new System.Data.DataTable();
    			
                table.Columns.Add("CreationDate");
                bulkCopy.ColumnMappings.Add("CreationDate", "CreationDate");  
                table.Columns.Add("CreatedBy");
                bulkCopy.ColumnMappings.Add("CreatedBy", "CreatedBy");  
                table.Columns.Add("ModificationDate");
                bulkCopy.ColumnMappings.Add("ModificationDate", "ModificationDate");  
                table.Columns.Add("ModifiedBy");
                bulkCopy.ColumnMappings.Add("ModifiedBy", "ModifiedBy");  
                table.Columns.Add("CanAccessAllFarms");
                bulkCopy.ColumnMappings.Add("CanAccessAllFarms", "CanAccessAllFarms");  
                table.Columns.Add("Description");
                bulkCopy.ColumnMappings.Add("Description", "Description");  
                table.Columns.Add("IsWebApi");
                bulkCopy.ColumnMappings.Add("IsWebApi", "IsWebApi");  
                table.Columns.Add("Name");
                bulkCopy.ColumnMappings.Add("Name", "Name");  
                foreach (var item in items) table.Rows.Add(new object[]{item.CreationDate,item.CreatedBy,item.ModificationDate,item.ModifiedBy,item.CanAccessAllFarms,item.Description,item.IsWebApi,item.Name});
                bulkCopy.WriteToServer(table);
            }
        }
    	
        public void SqlBulkCopyWithId(IEnumerable<Role> items)
        {
            using (var bulkCopy = new SqlBulkCopy(ConnectionString, SqlBulkCopyOptions.KeepIdentity |
                        SqlBulkCopyOptions.UseInternalTransaction |
                        SqlBulkCopyOptions.KeepNulls))
            {
    		    bulkCopy.BulkCopyTimeout = 0;
                bulkCopy.BatchSize = items.Count();
                bulkCopy.DestinationTableName = CodeGenerationHelper.GetTableName<Role>();
                var table = new System.Data.DataTable();    
                table.Columns.Add("Id");
                bulkCopy.ColumnMappings.Add("Id", "Id");  
                table.Columns.Add("CreationDate");
                bulkCopy.ColumnMappings.Add("CreationDate", "CreationDate");  
                table.Columns.Add("CreatedBy");
                bulkCopy.ColumnMappings.Add("CreatedBy", "CreatedBy");  
                table.Columns.Add("ModificationDate");
                bulkCopy.ColumnMappings.Add("ModificationDate", "ModificationDate");  
                table.Columns.Add("ModifiedBy");
                bulkCopy.ColumnMappings.Add("ModifiedBy", "ModifiedBy");  
                table.Columns.Add("CanAccessAllFarms");
                bulkCopy.ColumnMappings.Add("CanAccessAllFarms", "CanAccessAllFarms");  
                table.Columns.Add("Description");
                bulkCopy.ColumnMappings.Add("Description", "Description");  
                table.Columns.Add("IsWebApi");
                bulkCopy.ColumnMappings.Add("IsWebApi", "IsWebApi");  
                table.Columns.Add("Name");
                bulkCopy.ColumnMappings.Add("Name", "Name");  
                foreach (var item in items) table.Rows.Add(new object[]{item.Id,item.CreationDate,item.CreatedBy,item.ModificationDate,item.ModifiedBy,item.CanAccessAllFarms,item.Description,item.IsWebApi,item.Name});
                bulkCopy.WriteToServer(table);
            }
        }
        public void SqlInsert(IEnumerable<Role> items) 
        {
            if(!items.Any()) return;
    
            StringBuilder commandStringBuilder = new StringBuilder();
            commandStringBuilder.AppendFormat("INSERT INTO [{0}].[{1}].[{2}]{3}", DataRepositoryHelper.DatabaseNameFor(ConnectionString), "dbo", CodeGenerationHelper.GetTableName<Role>(), Environment.NewLine);
            commandStringBuilder.AppendFormat("{0}{1}","(CreationDate, CreatedBy, ModificationDate, ModifiedBy, CanAccessAllFarms, Description, IsWebApi, Name)", Environment.NewLine);
            //Nav. property 'PermissionList' is OneToMany => IGNORE
            //Nav. property 'UserRoleList' is OneToMany => IGNORE
            commandStringBuilder.AppendFormat("VALUES{0}", Environment.NewLine);
            
            int rowCount = 0;
            var startTime = DateTime.Now;
            string separator = null;
            StringBuilder stringBuilder = new StringBuilder();
            
            foreach(var item in items)
            {
                if (rowCount % 1000 == 0)
                {
                    stringBuilder.Append(commandStringBuilder);
                    separator = null;
                }
                if(separator != null) stringBuilder.AppendLine(separator);
                stringBuilder.Append(string.Format("({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7})", SqlEncode(item.CreationDate), SqlEncode(item.CreatedBy), SqlEncode(item.ModificationDate), SqlEncode(item.ModifiedBy), SqlEncode(item.CanAccessAllFarms), SqlEncode(item.Description), SqlEncode(item.IsWebApi), SqlEncode(item.Name)));
                
                rowCount++;
                separator = ",";
            }
            
            string command = stringBuilder.ToString();
            try
            {
                Repository.ExecuteSqlCommand(command);
                Log.Verbose("Inserted {0} '{1}' duration {2}", rowCount, "Role", DateTime.Now - startTime);
            }
            catch(Exception)
            {
                Log.Error(command);
                throw;
            }
        }
        public void SqlUpdate(IEnumerable<Role> items) 
        {
            if(!items.Any()) return;
            
            StringBuilder stringBuilder = new StringBuilder();
            foreach(var item in items)
            {
                stringBuilder.AppendFormat("UPDATE sqltable{0}", Environment.NewLine);
                stringBuilder.AppendLine(string.Format("SET CreationDate={0}, CreatedBy={1}, ModificationDate={2}, ModifiedBy={3}, CanAccessAllFarms={4}, Description={5}, IsWebApi={6}, Name={7}", SqlEncode(item.CreationDate), SqlEncode(item.CreatedBy), SqlEncode(DateTime.Now), SqlEncode(UserName), SqlEncode(item.CanAccessAllFarms), SqlEncode(item.Description), SqlEncode(item.IsWebApi), SqlEncode(item.Name)));
                stringBuilder.AppendFormat("FROM [{0}].[{1}].[{2}] AS sqltable {3}", DataRepositoryHelper.DatabaseNameFor(ConnectionString), "dbo", CodeGenerationHelper.GetTableName<Role>(), Environment.NewLine);
                stringBuilder.AppendFormat("WHERE sqltable.Id='{0}'{1}", item.Id, Environment.NewLine);
            }
    
            string command = stringBuilder.ToString();
            try
            {
                Repository.ExecuteSqlCommand(command);
            }
            catch(Exception)
            {
                Log.Error(command);
                throw;
            }
        }
        public void SqlBulkCopy(IEnumerable<User> items)
        {
            using (var bulkCopy = new SqlBulkCopy(ConnectionString, SqlBulkCopyOptions.KeepIdentity |
                        SqlBulkCopyOptions.UseInternalTransaction |
                        SqlBulkCopyOptions.KeepNulls))
            {
    		    bulkCopy.BulkCopyTimeout = 0;
                bulkCopy.BatchSize = items.Count();
                bulkCopy.DestinationTableName = CodeGenerationHelper.GetTableName<User>();
                var table = new System.Data.DataTable();
    			
                table.Columns.Add("CreationDate");
                bulkCopy.ColumnMappings.Add("CreationDate", "CreationDate");  
                table.Columns.Add("CreatedBy");
                bulkCopy.ColumnMappings.Add("CreatedBy", "CreatedBy");  
                table.Columns.Add("ModificationDate");
                bulkCopy.ColumnMappings.Add("ModificationDate", "ModificationDate");  
                table.Columns.Add("ModifiedBy");
                bulkCopy.ColumnMappings.Add("ModifiedBy", "ModifiedBy");  
                table.Columns.Add("Blocked");
                bulkCopy.ColumnMappings.Add("Blocked", "Blocked");  
                table.Columns.Add("Email");
                bulkCopy.ColumnMappings.Add("Email", "Email");  
                table.Columns.Add("LastActivityDate");
                bulkCopy.ColumnMappings.Add("LastActivityDate", "LastActivityDate");  
                table.Columns.Add("LastLoginDate");
                bulkCopy.ColumnMappings.Add("LastLoginDate", "LastLoginDate");  
                table.Columns.Add("LastPasswordChangeDate");
                bulkCopy.ColumnMappings.Add("LastPasswordChangeDate", "LastPasswordChangeDate");  
                table.Columns.Add("Password");
                bulkCopy.ColumnMappings.Add("Password", "Password");  
                table.Columns.Add("SuperUser");
                bulkCopy.ColumnMappings.Add("SuperUser", "SuperUser");  
                table.Columns.Add("UserName");
                bulkCopy.ColumnMappings.Add("UserName", "UserName");  
                foreach (var item in items) table.Rows.Add(new object[]{item.CreationDate,item.CreatedBy,item.ModificationDate,item.ModifiedBy,item.Blocked,item.Email,item.LastActivityDate,item.LastLoginDate,item.LastPasswordChangeDate,item.Password,item.SuperUser,item.UserName});
                bulkCopy.WriteToServer(table);
            }
        }
    	
        public void SqlBulkCopyWithId(IEnumerable<User> items)
        {
            using (var bulkCopy = new SqlBulkCopy(ConnectionString, SqlBulkCopyOptions.KeepIdentity |
                        SqlBulkCopyOptions.UseInternalTransaction |
                        SqlBulkCopyOptions.KeepNulls))
            {
    		    bulkCopy.BulkCopyTimeout = 0;
                bulkCopy.BatchSize = items.Count();
                bulkCopy.DestinationTableName = CodeGenerationHelper.GetTableName<User>();
                var table = new System.Data.DataTable();    
                table.Columns.Add("Id");
                bulkCopy.ColumnMappings.Add("Id", "Id");  
                table.Columns.Add("CreationDate");
                bulkCopy.ColumnMappings.Add("CreationDate", "CreationDate");  
                table.Columns.Add("CreatedBy");
                bulkCopy.ColumnMappings.Add("CreatedBy", "CreatedBy");  
                table.Columns.Add("ModificationDate");
                bulkCopy.ColumnMappings.Add("ModificationDate", "ModificationDate");  
                table.Columns.Add("ModifiedBy");
                bulkCopy.ColumnMappings.Add("ModifiedBy", "ModifiedBy");  
                table.Columns.Add("Blocked");
                bulkCopy.ColumnMappings.Add("Blocked", "Blocked");  
                table.Columns.Add("Email");
                bulkCopy.ColumnMappings.Add("Email", "Email");  
                table.Columns.Add("LastActivityDate");
                bulkCopy.ColumnMappings.Add("LastActivityDate", "LastActivityDate");  
                table.Columns.Add("LastLoginDate");
                bulkCopy.ColumnMappings.Add("LastLoginDate", "LastLoginDate");  
                table.Columns.Add("LastPasswordChangeDate");
                bulkCopy.ColumnMappings.Add("LastPasswordChangeDate", "LastPasswordChangeDate");  
                table.Columns.Add("Password");
                bulkCopy.ColumnMappings.Add("Password", "Password");  
                table.Columns.Add("SuperUser");
                bulkCopy.ColumnMappings.Add("SuperUser", "SuperUser");  
                table.Columns.Add("UserName");
                bulkCopy.ColumnMappings.Add("UserName", "UserName");  
                foreach (var item in items) table.Rows.Add(new object[]{item.Id,item.CreationDate,item.CreatedBy,item.ModificationDate,item.ModifiedBy,item.Blocked,item.Email,item.LastActivityDate,item.LastLoginDate,item.LastPasswordChangeDate,item.Password,item.SuperUser,item.UserName});
                bulkCopy.WriteToServer(table);
            }
        }
        public void SqlInsert(IEnumerable<User> items) 
        {
            if(!items.Any()) return;
    
            StringBuilder commandStringBuilder = new StringBuilder();
            commandStringBuilder.AppendFormat("INSERT INTO [{0}].[{1}].[{2}]{3}", DataRepositoryHelper.DatabaseNameFor(ConnectionString), "dbo", CodeGenerationHelper.GetTableName<User>(), Environment.NewLine);
            commandStringBuilder.AppendFormat("{0}{1}","(CreationDate, CreatedBy, ModificationDate, ModifiedBy, Blocked, Email, LastActivityDate, LastLoginDate, LastPasswordChangeDate, Password, SuperUser, UserName)", Environment.NewLine);
            //Nav. property 'UserRoleList' is OneToMany => IGNORE
            commandStringBuilder.AppendFormat("VALUES{0}", Environment.NewLine);
            
            int rowCount = 0;
            var startTime = DateTime.Now;
            string separator = null;
            StringBuilder stringBuilder = new StringBuilder();
            
            foreach(var item in items)
            {
                if (rowCount % 1000 == 0)
                {
                    stringBuilder.Append(commandStringBuilder);
                    separator = null;
                }
                if(separator != null) stringBuilder.AppendLine(separator);
                stringBuilder.Append(string.Format("({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11})", SqlEncode(item.CreationDate), SqlEncode(item.CreatedBy), SqlEncode(item.ModificationDate), SqlEncode(item.ModifiedBy), SqlEncode(item.Blocked), SqlEncode(item.Email), SqlEncode(item.LastActivityDate), SqlEncode(item.LastLoginDate), SqlEncode(item.LastPasswordChangeDate), SqlEncode(item.Password), SqlEncode(item.SuperUser), SqlEncode(item.UserName)));
                
                rowCount++;
                separator = ",";
            }
            
            string command = stringBuilder.ToString();
            try
            {
                Repository.ExecuteSqlCommand(command);
                Log.Verbose("Inserted {0} '{1}' duration {2}", rowCount, "User", DateTime.Now - startTime);
            }
            catch(Exception)
            {
                Log.Error(command);
                throw;
            }
        }
        public void SqlUpdate(IEnumerable<User> items) 
        {
            if(!items.Any()) return;
            
            StringBuilder stringBuilder = new StringBuilder();
            foreach(var item in items)
            {
                stringBuilder.AppendFormat("UPDATE sqltable{0}", Environment.NewLine);
                stringBuilder.AppendLine(string.Format("SET CreationDate={0}, CreatedBy={1}, ModificationDate={2}, ModifiedBy={3}, Blocked={4}, Email={5}, LastActivityDate={6}, LastLoginDate={7}, LastPasswordChangeDate={8}, Password={9}, SuperUser={10}, UserName={11}", SqlEncode(item.CreationDate), SqlEncode(item.CreatedBy), SqlEncode(DateTime.Now), SqlEncode(UserName), SqlEncode(item.Blocked), SqlEncode(item.Email), SqlEncode(item.LastActivityDate), SqlEncode(item.LastLoginDate), SqlEncode(item.LastPasswordChangeDate), SqlEncode(item.Password), SqlEncode(item.SuperUser), SqlEncode(item.UserName)));
                stringBuilder.AppendFormat("FROM [{0}].[{1}].[{2}] AS sqltable {3}", DataRepositoryHelper.DatabaseNameFor(ConnectionString), "dbo", CodeGenerationHelper.GetTableName<User>(), Environment.NewLine);
                stringBuilder.AppendFormat("WHERE sqltable.Id='{0}'{1}", item.Id, Environment.NewLine);
            }
    
            string command = stringBuilder.ToString();
            try
            {
                Repository.ExecuteSqlCommand(command);
            }
            catch(Exception)
            {
                Log.Error(command);
                throw;
            }
        }
        public void SqlBulkCopy(IEnumerable<UserRole> items)
        {
            using (var bulkCopy = new SqlBulkCopy(ConnectionString, SqlBulkCopyOptions.KeepIdentity |
                        SqlBulkCopyOptions.UseInternalTransaction |
                        SqlBulkCopyOptions.KeepNulls))
            {
    		    bulkCopy.BulkCopyTimeout = 0;
                bulkCopy.BatchSize = items.Count();
                bulkCopy.DestinationTableName = CodeGenerationHelper.GetTableName<UserRole>();
                var table = new System.Data.DataTable();
    			
                table.Columns.Add("CreationDate");
                bulkCopy.ColumnMappings.Add("CreationDate", "CreationDate");  
                table.Columns.Add("CreatedBy");
                bulkCopy.ColumnMappings.Add("CreatedBy", "CreatedBy");  
                table.Columns.Add("ModificationDate");
                bulkCopy.ColumnMappings.Add("ModificationDate", "ModificationDate");  
                table.Columns.Add("ModifiedBy");
                bulkCopy.ColumnMappings.Add("ModifiedBy", "ModifiedBy");  
                table.Columns.Add("Comment");
                bulkCopy.ColumnMappings.Add("Comment", "Comment");  
                table.Columns.Add("CommitmentDate");
                bulkCopy.ColumnMappings.Add("CommitmentDate", "CommitmentDate");  
                table.Columns.Add("FarmGroup");
                bulkCopy.ColumnMappings.Add("FarmGroup", "FarmGroup");  
                table.Columns.Add("Role_Id");
                bulkCopy.ColumnMappings.Add("Role_Id", "Role_Id");  
                table.Columns.Add("User_Id");
                bulkCopy.ColumnMappings.Add("User_Id", "User_Id");  
                foreach (var item in items) table.Rows.Add(new object[]{item.CreationDate,item.CreatedBy,item.ModificationDate,item.ModifiedBy,item.Comment,item.CommitmentDate,(int)item.FarmGroup,item.Role == null ? null : item.Role.Id as int ?,item.User == null ? null : item.User.Id as int ?});
                bulkCopy.WriteToServer(table);
            }
        }
    	
        public void SqlBulkCopyWithId(IEnumerable<UserRole> items)
        {
            using (var bulkCopy = new SqlBulkCopy(ConnectionString, SqlBulkCopyOptions.KeepIdentity |
                        SqlBulkCopyOptions.UseInternalTransaction |
                        SqlBulkCopyOptions.KeepNulls))
            {
    		    bulkCopy.BulkCopyTimeout = 0;
                bulkCopy.BatchSize = items.Count();
                bulkCopy.DestinationTableName = CodeGenerationHelper.GetTableName<UserRole>();
                var table = new System.Data.DataTable();    
                table.Columns.Add("Id");
                bulkCopy.ColumnMappings.Add("Id", "Id");  
                table.Columns.Add("CreationDate");
                bulkCopy.ColumnMappings.Add("CreationDate", "CreationDate");  
                table.Columns.Add("CreatedBy");
                bulkCopy.ColumnMappings.Add("CreatedBy", "CreatedBy");  
                table.Columns.Add("ModificationDate");
                bulkCopy.ColumnMappings.Add("ModificationDate", "ModificationDate");  
                table.Columns.Add("ModifiedBy");
                bulkCopy.ColumnMappings.Add("ModifiedBy", "ModifiedBy");  
                table.Columns.Add("Comment");
                bulkCopy.ColumnMappings.Add("Comment", "Comment");  
                table.Columns.Add("CommitmentDate");
                bulkCopy.ColumnMappings.Add("CommitmentDate", "CommitmentDate");  
                table.Columns.Add("FarmGroup");
                bulkCopy.ColumnMappings.Add("FarmGroup", "FarmGroup");  
                table.Columns.Add("Role_Id");
                bulkCopy.ColumnMappings.Add("Role_Id", "Role_Id");  
                table.Columns.Add("User_Id");
                bulkCopy.ColumnMappings.Add("User_Id", "User_Id");  
                foreach (var item in items) table.Rows.Add(new object[]{item.Id,item.CreationDate,item.CreatedBy,item.ModificationDate,item.ModifiedBy,item.Comment,item.CommitmentDate,(int)item.FarmGroup,item.Role == null ? null : item.Role.Id as int ?,item.User == null ? null : item.User.Id as int ?});
                bulkCopy.WriteToServer(table);
            }
        }
        public void SqlInsert(IEnumerable<UserRole> items) 
        {
            if(!items.Any()) return;
    
            StringBuilder commandStringBuilder = new StringBuilder();
            commandStringBuilder.AppendFormat("INSERT INTO [{0}].[{1}].[{2}]{3}", DataRepositoryHelper.DatabaseNameFor(ConnectionString), "dbo", CodeGenerationHelper.GetTableName<UserRole>(), Environment.NewLine);
            commandStringBuilder.AppendFormat("{0}{1}","(CreationDate, CreatedBy, ModificationDate, ModifiedBy, Comment, CommitmentDate, FarmGroup, Role_Id, User_Id)", Environment.NewLine);
            commandStringBuilder.AppendFormat("VALUES{0}", Environment.NewLine);
            
            int rowCount = 0;
            var startTime = DateTime.Now;
            string separator = null;
            StringBuilder stringBuilder = new StringBuilder();
            
            foreach(var item in items)
            {
                if (rowCount % 1000 == 0)
                {
                    stringBuilder.Append(commandStringBuilder);
                    separator = null;
                }
                if(separator != null) stringBuilder.AppendLine(separator);
                stringBuilder.Append(string.Format("({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8})", SqlEncode(item.CreationDate), SqlEncode(item.CreatedBy), SqlEncode(item.ModificationDate), SqlEncode(item.ModifiedBy), SqlEncode(item.Comment), SqlEncode(item.CommitmentDate), (int)item.FarmGroup, SqlEncodeId(item.Role), SqlEncodeId(item.User)));
                
                rowCount++;
                separator = ",";
            }
            
            string command = stringBuilder.ToString();
            try
            {
                Repository.ExecuteSqlCommand(command);
                Log.Verbose("Inserted {0} '{1}' duration {2}", rowCount, "UserRole", DateTime.Now - startTime);
            }
            catch(Exception)
            {
                Log.Error(command);
                throw;
            }
        }
        public void SqlUpdate(IEnumerable<UserRole> items) 
        {
            if(!items.Any()) return;
            
            StringBuilder stringBuilder = new StringBuilder();
            foreach(var item in items)
            {
                stringBuilder.AppendFormat("UPDATE sqltable{0}", Environment.NewLine);
                stringBuilder.AppendLine(string.Format("SET CreationDate={0}, CreatedBy={1}, ModificationDate={2}, ModifiedBy={3}, Comment={4}, CommitmentDate={5}, FarmGroup={6}, Role_Id={7}, User_Id={8}", SqlEncode(item.CreationDate), SqlEncode(item.CreatedBy), SqlEncode(DateTime.Now), SqlEncode(UserName), SqlEncode(item.Comment), SqlEncode(item.CommitmentDate), (int)item.FarmGroup, SqlEncodeId(item.Role), SqlEncodeId(item.User)));
                stringBuilder.AppendFormat("FROM [{0}].[{1}].[{2}] AS sqltable {3}", DataRepositoryHelper.DatabaseNameFor(ConnectionString), "dbo", CodeGenerationHelper.GetTableName<UserRole>(), Environment.NewLine);
                stringBuilder.AppendFormat("WHERE sqltable.Id='{0}'{1}", item.Id, Environment.NewLine);
            }
    
            string command = stringBuilder.ToString();
            try
            {
                Repository.ExecuteSqlCommand(command);
            }
            catch(Exception)
            {
                Log.Error(command);
                throw;
            }
        }
        #endregion
    
        #region CascadeRemove
        public virtual void CascadeRemove(Permission item)
        {
            Requires<InvalidKeyException>.GreaterThan(item.Id, 0);
            Log.Verbose("CascadeRemove({0})", item.ToString());
    		//1==>X
            //1<==>X
            base.CascadeRemove(item);
        }
        public virtual void CascadeRemoveRange(IList<Permission> items)
        {
            foreach(var item in items.ToArray()) CascadeRemove(item);
        }
        public virtual void CascadeRemove(Role item)
        {
            Requires<InvalidKeyException>.GreaterThan(item.Id, 0);
            Log.Verbose("CascadeRemove({0})", item.ToString());
    		//1==>X
            //1<==>X
            CascadeRemoveRange(item.PermissionList); //1<==>N
            CascadeRemoveRange(item.UserRoleList); //1<==>N
            base.CascadeRemove(item);
        }
        public virtual void CascadeRemoveRange(IList<Role> items)
        {
            foreach(var item in items.ToArray()) CascadeRemove(item);
        }
        public virtual void CascadeRemove(User item)
        {
            Requires<InvalidKeyException>.GreaterThan(item.Id, 0);
            Log.Verbose("CascadeRemove({0})", item.ToString());
    		//1==>X
            //1<==>X
            CascadeRemoveRange(item.UserRoleList); //1<==>N
            base.CascadeRemove(item);
        }
        public virtual void CascadeRemoveRange(IList<User> items)
        {
            foreach(var item in items.ToArray()) CascadeRemove(item);
        }
        public virtual void CascadeRemove(UserRole item)
        {
            Requires<InvalidKeyException>.GreaterThan(item.Id, 0);
            Log.Verbose("CascadeRemove({0})", item.ToString());
    		//1==>X
            //1<==>X
            base.CascadeRemove(item);
        }
        public virtual void CascadeRemoveRange(IList<UserRole> items)
        {
            foreach(var item in items.ToArray()) CascadeRemove(item);
        }
        #endregion
        #endregion
     
    }
}
