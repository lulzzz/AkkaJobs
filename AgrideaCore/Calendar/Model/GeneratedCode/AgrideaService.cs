/////////////////////////////////////////////////////////////////////////////////
//                                                                             //
// <auto-generated>                                                            //
// Date=? Machine=? User=?                                                     //
// Copyright (c) 2010-2011 Agridea, All Rights Reserved                        //
// </auto-generated>                                                           //
//                                                                             //
/////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Data.SqlClient;
//using System.Data.Entity.SqlServer;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using System.Text;
using Agridea;
using Agridea.Calendar;
using Agridea.DataRepository;
using Agridea.Diagnostics.Contracts;
using Agridea.Diagnostics.Logging;
using Agridea.Metadata;
using Agridea.News;
using Agridea.Security;
using Agridea.Service;
using Agridea.Web.UI;

namespace Agridea
{
    public partial class AgrideaService
    {
        #region Services
        #region GetByDiscriminants
        public CalendarEventRecurrence GetByDiscriminants(CalendarEventRecurrence item) 
        {
            return Repository.All<CalendarEventRecurrence>().FirstOrDefault(m =>
                m.Code == item.Code);
        }
        public CalendarEventRecurrence GetByDiscriminants(CalendarEventRecurrence item, IList<CalendarEventRecurrence> existingItems)
        {
            return existingItems.FirstOrDefault(m =>
                m.Code == item.Code);
        }
        public CalendarEventStatus GetByDiscriminants(CalendarEventStatus item) 
        {
            return Repository.All<CalendarEventStatus>().FirstOrDefault(m =>
                m.Code == item.Code);
        }
        public CalendarEventStatus GetByDiscriminants(CalendarEventStatus item, IList<CalendarEventStatus> existingItems)
        {
            return existingItems.FirstOrDefault(m =>
                m.Code == item.Code);
        }
        #endregion
    
        #region Insert/Update/Delete Sql commands
        public void SqlBulkCopy(IEnumerable<CalendarEvent> items)
        {
            using (var bulkCopy = new SqlBulkCopy(ConnectionString, SqlBulkCopyOptions.KeepIdentity |
                        SqlBulkCopyOptions.UseInternalTransaction |
                        SqlBulkCopyOptions.KeepNulls))
            {
    		    bulkCopy.BulkCopyTimeout = 0;
                bulkCopy.BatchSize = items.Count();
                bulkCopy.DestinationTableName = CodeGenerationHelper.GetTableName<CalendarEvent>();
                var table = new System.Data.DataTable();
    			
                table.Columns.Add("CreationDate");
                bulkCopy.ColumnMappings.Add("CreationDate", "CreationDate");  
                table.Columns.Add("CreatedBy");
                bulkCopy.ColumnMappings.Add("CreatedBy", "CreatedBy");  
                table.Columns.Add("ModificationDate");
                bulkCopy.ColumnMappings.Add("ModificationDate", "ModificationDate");  
                table.Columns.Add("ModifiedBy");
                bulkCopy.ColumnMappings.Add("ModifiedBy", "ModifiedBy");  
                table.Columns.Add("AppliesTo");
                bulkCopy.ColumnMappings.Add("AppliesTo", "AppliesTo");  
                table.Columns.Add("Comment");
                bulkCopy.ColumnMappings.Add("Comment", "Comment");  
                table.Columns.Add("Description");
                bulkCopy.ColumnMappings.Add("Description", "Description");  
                table.Columns.Add("EndDate");
                bulkCopy.ColumnMappings.Add("EndDate", "EndDate");  
                table.Columns.Add("FileData");
                bulkCopy.ColumnMappings.Add("FileData", "FileData");  
                table.Columns.Add("FileName");
                bulkCopy.ColumnMappings.Add("FileName", "FileName");  
                table.Columns.Add("FileType");
                bulkCopy.ColumnMappings.Add("FileType", "FileType");  
                table.Columns.Add("Owner");
                bulkCopy.ColumnMappings.Add("Owner", "Owner");  
                table.Columns.Add("StartDate");
                bulkCopy.ColumnMappings.Add("StartDate", "StartDate");  
                table.Columns.Add("Title");
                bulkCopy.ColumnMappings.Add("Title", "Title");  
                table.Columns.Add("Recurrence_Id");
                bulkCopy.ColumnMappings.Add("Recurrence_Id", "Recurrence_Id");  
                table.Columns.Add("Status_Id");
                bulkCopy.ColumnMappings.Add("Status_Id", "Status_Id");  
                foreach (var item in items) table.Rows.Add(new object[]{item.CreationDate,item.CreatedBy,item.ModificationDate,item.ModifiedBy,item.AppliesTo,item.Comment,item.Description,item.EndDate,item.FileData,item.FileName,item.FileType,item.Owner,item.StartDate,item.Title,item.Recurrence == null ? null : item.Recurrence.Id as int ?,item.Status == null ? null : item.Status.Id as int ?});
                bulkCopy.WriteToServer(table);
            }
        }
    	
        public void SqlBulkCopyWithId(IEnumerable<CalendarEvent> items)
        {
            using (var bulkCopy = new SqlBulkCopy(ConnectionString, SqlBulkCopyOptions.KeepIdentity |
                        SqlBulkCopyOptions.UseInternalTransaction |
                        SqlBulkCopyOptions.KeepNulls))
            {
    		    bulkCopy.BulkCopyTimeout = 0;
                bulkCopy.BatchSize = items.Count();
                bulkCopy.DestinationTableName = CodeGenerationHelper.GetTableName<CalendarEvent>();
                var table = new System.Data.DataTable();    
                table.Columns.Add("Id");
                bulkCopy.ColumnMappings.Add("Id", "Id");  
                table.Columns.Add("CreationDate");
                bulkCopy.ColumnMappings.Add("CreationDate", "CreationDate");  
                table.Columns.Add("CreatedBy");
                bulkCopy.ColumnMappings.Add("CreatedBy", "CreatedBy");  
                table.Columns.Add("ModificationDate");
                bulkCopy.ColumnMappings.Add("ModificationDate", "ModificationDate");  
                table.Columns.Add("ModifiedBy");
                bulkCopy.ColumnMappings.Add("ModifiedBy", "ModifiedBy");  
                table.Columns.Add("AppliesTo");
                bulkCopy.ColumnMappings.Add("AppliesTo", "AppliesTo");  
                table.Columns.Add("Comment");
                bulkCopy.ColumnMappings.Add("Comment", "Comment");  
                table.Columns.Add("Description");
                bulkCopy.ColumnMappings.Add("Description", "Description");  
                table.Columns.Add("EndDate");
                bulkCopy.ColumnMappings.Add("EndDate", "EndDate");  
                table.Columns.Add("FileData");
                bulkCopy.ColumnMappings.Add("FileData", "FileData");  
                table.Columns.Add("FileName");
                bulkCopy.ColumnMappings.Add("FileName", "FileName");  
                table.Columns.Add("FileType");
                bulkCopy.ColumnMappings.Add("FileType", "FileType");  
                table.Columns.Add("Owner");
                bulkCopy.ColumnMappings.Add("Owner", "Owner");  
                table.Columns.Add("StartDate");
                bulkCopy.ColumnMappings.Add("StartDate", "StartDate");  
                table.Columns.Add("Title");
                bulkCopy.ColumnMappings.Add("Title", "Title");  
                table.Columns.Add("Recurrence_Id");
                bulkCopy.ColumnMappings.Add("Recurrence_Id", "Recurrence_Id");  
                table.Columns.Add("Status_Id");
                bulkCopy.ColumnMappings.Add("Status_Id", "Status_Id");  
                foreach (var item in items) table.Rows.Add(new object[]{item.Id,item.CreationDate,item.CreatedBy,item.ModificationDate,item.ModifiedBy,item.AppliesTo,item.Comment,item.Description,item.EndDate,item.FileData,item.FileName,item.FileType,item.Owner,item.StartDate,item.Title,item.Recurrence == null ? null : item.Recurrence.Id as int ?,item.Status == null ? null : item.Status.Id as int ?});
                bulkCopy.WriteToServer(table);
            }
        }
        public void SqlInsert(IEnumerable<CalendarEvent> items) 
        {
            if(!items.Any()) return;
    
            StringBuilder commandStringBuilder = new StringBuilder();
            commandStringBuilder.AppendFormat("INSERT INTO [{0}].[{1}].[{2}]{3}", DataRepositoryHelper.DatabaseNameFor(ConnectionString), "dbo", CodeGenerationHelper.GetTableName<CalendarEvent>(), Environment.NewLine);
            commandStringBuilder.AppendFormat("{0}{1}","(CreationDate, CreatedBy, ModificationDate, ModifiedBy, AppliesTo, Comment, Description, EndDate, FileData, FileName, FileType, Owner, StartDate, Title, Recurrence_Id, Status_Id)", Environment.NewLine);
            commandStringBuilder.AppendFormat("VALUES{0}", Environment.NewLine);
            
            int rowCount = 0;
            var startTime = DateTime.Now;
            string separator = null;
            StringBuilder stringBuilder = new StringBuilder();
            
            foreach(var item in items)
            {
                if (rowCount % 1000 == 0)
                {
                    stringBuilder.Append(commandStringBuilder);
                    separator = null;
                }
                if(separator != null) stringBuilder.AppendLine(separator);
                stringBuilder.Append(string.Format("({0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15})", SqlEncode(item.CreationDate), SqlEncode(item.CreatedBy), SqlEncode(item.ModificationDate), SqlEncode(item.ModifiedBy), SqlEncode(item.AppliesTo), SqlEncode(item.Comment), SqlEncode(item.Description), SqlEncode(item.EndDate), SqlEncode(item.FileData), SqlEncode(item.FileName), SqlEncode(item.FileType), SqlEncode(item.Owner), SqlEncode(item.StartDate), SqlEncode(item.Title), SqlEncodeId(item.Recurrence), SqlEncodeId(item.Status)));
                
                rowCount++;
                separator = ",";
            }
            
            string command = stringBuilder.ToString();
            try
            {
                Repository.ExecuteSqlCommand(command);
                Log.Verbose("Inserted {0} '{1}' duration {2}", rowCount, "CalendarEvent", DateTime.Now - startTime);
            }
            catch(Exception)
            {
                Log.Error(command);
                throw;
            }
        }
        public void SqlUpdate(IEnumerable<CalendarEvent> items) 
        {
            if(!items.Any()) return;
            
            StringBuilder stringBuilder = new StringBuilder();
            foreach(var item in items)
            {
                stringBuilder.AppendFormat("UPDATE sqltable{0}", Environment.NewLine);
                stringBuilder.AppendLine(string.Format("SET CreationDate={0}, CreatedBy={1}, ModificationDate={2}, ModifiedBy={3}, AppliesTo={4}, Comment={5}, Description={6}, EndDate={7}, FileData={8}, FileName={9}, FileType={10}, Owner={11}, StartDate={12}, Title={13}, Recurrence_Id={14}, Status_Id={15}", SqlEncode(item.CreationDate), SqlEncode(item.CreatedBy), SqlEncode(DateTime.Now), SqlEncode(UserName), SqlEncode(item.AppliesTo), SqlEncode(item.Comment), SqlEncode(item.Description), SqlEncode(item.EndDate), SqlEncode(item.FileData), SqlEncode(item.FileName), SqlEncode(item.FileType), SqlEncode(item.Owner), SqlEncode(item.StartDate), SqlEncode(item.Title), SqlEncodeId(item.Recurrence), SqlEncodeId(item.Status)));
                stringBuilder.AppendFormat("FROM [{0}].[{1}].[{2}] AS sqltable {3}", DataRepositoryHelper.DatabaseNameFor(ConnectionString), "dbo", CodeGenerationHelper.GetTableName<CalendarEvent>(), Environment.NewLine);
                stringBuilder.AppendFormat("WHERE sqltable.Id='{0}'{1}", item.Id, Environment.NewLine);
            }
    
            string command = stringBuilder.ToString();
            try
            {
                Repository.ExecuteSqlCommand(command);
            }
            catch(Exception)
            {
                Log.Error(command);
                throw;
            }
        }
        public void SqlBulkCopy(IEnumerable<CalendarEventRecurrence> items)
        {
            using (var bulkCopy = new SqlBulkCopy(ConnectionString, SqlBulkCopyOptions.KeepIdentity |
                        SqlBulkCopyOptions.UseInternalTransaction |
                        SqlBulkCopyOptions.KeepNulls))
            {
    		    bulkCopy.BulkCopyTimeout = 0;
                bulkCopy.BatchSize = items.Count();
                bulkCopy.DestinationTableName = CodeGenerationHelper.GetTableName<CalendarEventRecurrence>();
                var table = new System.Data.DataTable();
    			
                table.Columns.Add("CreationDate");
                bulkCopy.ColumnMappings.Add("CreationDate", "CreationDate");  
                table.Columns.Add("CreatedBy");
                bulkCopy.ColumnMappings.Add("CreatedBy", "CreatedBy");  
                table.Columns.Add("ModificationDate");
                bulkCopy.ColumnMappings.Add("ModificationDate", "ModificationDate");  
                table.Columns.Add("ModifiedBy");
                bulkCopy.ColumnMappings.Add("ModifiedBy", "ModifiedBy");  
                table.Columns.Add("Code");
                bulkCopy.ColumnMappings.Add("Code", "Code");  
                table.Columns.Add("Description");
                bulkCopy.ColumnMappings.Add("Description", "Description");  
                foreach (var item in items) table.Rows.Add(new object[]{item.CreationDate,item.CreatedBy,item.ModificationDate,item.ModifiedBy,item.Code,item.Description});
                bulkCopy.WriteToServer(table);
            }
        }
    	
        public void SqlBulkCopyWithId(IEnumerable<CalendarEventRecurrence> items)
        {
            using (var bulkCopy = new SqlBulkCopy(ConnectionString, SqlBulkCopyOptions.KeepIdentity |
                        SqlBulkCopyOptions.UseInternalTransaction |
                        SqlBulkCopyOptions.KeepNulls))
            {
    		    bulkCopy.BulkCopyTimeout = 0;
                bulkCopy.BatchSize = items.Count();
                bulkCopy.DestinationTableName = CodeGenerationHelper.GetTableName<CalendarEventRecurrence>();
                var table = new System.Data.DataTable();    
                table.Columns.Add("Id");
                bulkCopy.ColumnMappings.Add("Id", "Id");  
                table.Columns.Add("CreationDate");
                bulkCopy.ColumnMappings.Add("CreationDate", "CreationDate");  
                table.Columns.Add("CreatedBy");
                bulkCopy.ColumnMappings.Add("CreatedBy", "CreatedBy");  
                table.Columns.Add("ModificationDate");
                bulkCopy.ColumnMappings.Add("ModificationDate", "ModificationDate");  
                table.Columns.Add("ModifiedBy");
                bulkCopy.ColumnMappings.Add("ModifiedBy", "ModifiedBy");  
                table.Columns.Add("Code");
                bulkCopy.ColumnMappings.Add("Code", "Code");  
                table.Columns.Add("Description");
                bulkCopy.ColumnMappings.Add("Description", "Description");  
                foreach (var item in items) table.Rows.Add(new object[]{item.Id,item.CreationDate,item.CreatedBy,item.ModificationDate,item.ModifiedBy,item.Code,item.Description});
                bulkCopy.WriteToServer(table);
            }
        }
        public void SqlInsert(IEnumerable<CalendarEventRecurrence> items) 
        {
            if(!items.Any()) return;
    
            StringBuilder commandStringBuilder = new StringBuilder();
            commandStringBuilder.AppendFormat("INSERT INTO [{0}].[{1}].[{2}]{3}", DataRepositoryHelper.DatabaseNameFor(ConnectionString), "dbo", CodeGenerationHelper.GetTableName<CalendarEventRecurrence>(), Environment.NewLine);
            commandStringBuilder.AppendFormat("{0}{1}","(CreationDate, CreatedBy, ModificationDate, ModifiedBy, Code, Description)", Environment.NewLine);
            commandStringBuilder.AppendFormat("VALUES{0}", Environment.NewLine);
            
            int rowCount = 0;
            var startTime = DateTime.Now;
            string separator = null;
            StringBuilder stringBuilder = new StringBuilder();
            
            foreach(var item in items)
            {
                if (rowCount % 1000 == 0)
                {
                    stringBuilder.Append(commandStringBuilder);
                    separator = null;
                }
                if(separator != null) stringBuilder.AppendLine(separator);
                stringBuilder.Append(string.Format("({0}, {1}, {2}, {3}, {4}, {5})", SqlEncode(item.CreationDate), SqlEncode(item.CreatedBy), SqlEncode(item.ModificationDate), SqlEncode(item.ModifiedBy), SqlEncode(item.Code), SqlEncode(item.Description)));
                
                rowCount++;
                separator = ",";
            }
            
            string command = stringBuilder.ToString();
            try
            {
                Repository.ExecuteSqlCommand(command);
                Log.Verbose("Inserted {0} '{1}' duration {2}", rowCount, "CalendarEventRecurrence", DateTime.Now - startTime);
            }
            catch(Exception)
            {
                Log.Error(command);
                throw;
            }
        }
        public void SqlUpdate(IEnumerable<CalendarEventRecurrence> items) 
        {
            if(!items.Any()) return;
            
            StringBuilder stringBuilder = new StringBuilder();
            foreach(var item in items)
            {
                stringBuilder.AppendFormat("UPDATE sqltable{0}", Environment.NewLine);
                stringBuilder.AppendLine(string.Format("SET CreationDate={0}, CreatedBy={1}, ModificationDate={2}, ModifiedBy={3}, Code={4}, Description={5}", SqlEncode(item.CreationDate), SqlEncode(item.CreatedBy), SqlEncode(DateTime.Now), SqlEncode(UserName), SqlEncode(item.Code), SqlEncode(item.Description)));
                stringBuilder.AppendFormat("FROM [{0}].[{1}].[{2}] AS sqltable {3}", DataRepositoryHelper.DatabaseNameFor(ConnectionString), "dbo", CodeGenerationHelper.GetTableName<CalendarEventRecurrence>(), Environment.NewLine);
                stringBuilder.AppendFormat("WHERE sqltable.Id='{0}'{1}", item.Id, Environment.NewLine);
            }
    
            string command = stringBuilder.ToString();
            try
            {
                Repository.ExecuteSqlCommand(command);
            }
            catch(Exception)
            {
                Log.Error(command);
                throw;
            }
        }
        public void SqlBulkCopy(IEnumerable<CalendarEventStatus> items)
        {
            using (var bulkCopy = new SqlBulkCopy(ConnectionString, SqlBulkCopyOptions.KeepIdentity |
                        SqlBulkCopyOptions.UseInternalTransaction |
                        SqlBulkCopyOptions.KeepNulls))
            {
    		    bulkCopy.BulkCopyTimeout = 0;
                bulkCopy.BatchSize = items.Count();
                bulkCopy.DestinationTableName = CodeGenerationHelper.GetTableName<CalendarEventStatus>();
                var table = new System.Data.DataTable();
    			
                table.Columns.Add("CreationDate");
                bulkCopy.ColumnMappings.Add("CreationDate", "CreationDate");  
                table.Columns.Add("CreatedBy");
                bulkCopy.ColumnMappings.Add("CreatedBy", "CreatedBy");  
                table.Columns.Add("ModificationDate");
                bulkCopy.ColumnMappings.Add("ModificationDate", "ModificationDate");  
                table.Columns.Add("ModifiedBy");
                bulkCopy.ColumnMappings.Add("ModifiedBy", "ModifiedBy");  
                table.Columns.Add("Code");
                bulkCopy.ColumnMappings.Add("Code", "Code");  
                table.Columns.Add("Description");
                bulkCopy.ColumnMappings.Add("Description", "Description");  
                foreach (var item in items) table.Rows.Add(new object[]{item.CreationDate,item.CreatedBy,item.ModificationDate,item.ModifiedBy,item.Code,item.Description});
                bulkCopy.WriteToServer(table);
            }
        }
    	
        public void SqlBulkCopyWithId(IEnumerable<CalendarEventStatus> items)
        {
            using (var bulkCopy = new SqlBulkCopy(ConnectionString, SqlBulkCopyOptions.KeepIdentity |
                        SqlBulkCopyOptions.UseInternalTransaction |
                        SqlBulkCopyOptions.KeepNulls))
            {
    		    bulkCopy.BulkCopyTimeout = 0;
                bulkCopy.BatchSize = items.Count();
                bulkCopy.DestinationTableName = CodeGenerationHelper.GetTableName<CalendarEventStatus>();
                var table = new System.Data.DataTable();    
                table.Columns.Add("Id");
                bulkCopy.ColumnMappings.Add("Id", "Id");  
                table.Columns.Add("CreationDate");
                bulkCopy.ColumnMappings.Add("CreationDate", "CreationDate");  
                table.Columns.Add("CreatedBy");
                bulkCopy.ColumnMappings.Add("CreatedBy", "CreatedBy");  
                table.Columns.Add("ModificationDate");
                bulkCopy.ColumnMappings.Add("ModificationDate", "ModificationDate");  
                table.Columns.Add("ModifiedBy");
                bulkCopy.ColumnMappings.Add("ModifiedBy", "ModifiedBy");  
                table.Columns.Add("Code");
                bulkCopy.ColumnMappings.Add("Code", "Code");  
                table.Columns.Add("Description");
                bulkCopy.ColumnMappings.Add("Description", "Description");  
                foreach (var item in items) table.Rows.Add(new object[]{item.Id,item.CreationDate,item.CreatedBy,item.ModificationDate,item.ModifiedBy,item.Code,item.Description});
                bulkCopy.WriteToServer(table);
            }
        }
        public void SqlInsert(IEnumerable<CalendarEventStatus> items) 
        {
            if(!items.Any()) return;
    
            StringBuilder commandStringBuilder = new StringBuilder();
            commandStringBuilder.AppendFormat("INSERT INTO [{0}].[{1}].[{2}]{3}", DataRepositoryHelper.DatabaseNameFor(ConnectionString), "dbo", CodeGenerationHelper.GetTableName<CalendarEventStatus>(), Environment.NewLine);
            commandStringBuilder.AppendFormat("{0}{1}","(CreationDate, CreatedBy, ModificationDate, ModifiedBy, Code, Description)", Environment.NewLine);
            commandStringBuilder.AppendFormat("VALUES{0}", Environment.NewLine);
            
            int rowCount = 0;
            var startTime = DateTime.Now;
            string separator = null;
            StringBuilder stringBuilder = new StringBuilder();
            
            foreach(var item in items)
            {
                if (rowCount % 1000 == 0)
                {
                    stringBuilder.Append(commandStringBuilder);
                    separator = null;
                }
                if(separator != null) stringBuilder.AppendLine(separator);
                stringBuilder.Append(string.Format("({0}, {1}, {2}, {3}, {4}, {5})", SqlEncode(item.CreationDate), SqlEncode(item.CreatedBy), SqlEncode(item.ModificationDate), SqlEncode(item.ModifiedBy), SqlEncode(item.Code), SqlEncode(item.Description)));
                
                rowCount++;
                separator = ",";
            }
            
            string command = stringBuilder.ToString();
            try
            {
                Repository.ExecuteSqlCommand(command);
                Log.Verbose("Inserted {0} '{1}' duration {2}", rowCount, "CalendarEventStatus", DateTime.Now - startTime);
            }
            catch(Exception)
            {
                Log.Error(command);
                throw;
            }
        }
        public void SqlUpdate(IEnumerable<CalendarEventStatus> items) 
        {
            if(!items.Any()) return;
            
            StringBuilder stringBuilder = new StringBuilder();
            foreach(var item in items)
            {
                stringBuilder.AppendFormat("UPDATE sqltable{0}", Environment.NewLine);
                stringBuilder.AppendLine(string.Format("SET CreationDate={0}, CreatedBy={1}, ModificationDate={2}, ModifiedBy={3}, Code={4}, Description={5}", SqlEncode(item.CreationDate), SqlEncode(item.CreatedBy), SqlEncode(DateTime.Now), SqlEncode(UserName), SqlEncode(item.Code), SqlEncode(item.Description)));
                stringBuilder.AppendFormat("FROM [{0}].[{1}].[{2}] AS sqltable {3}", DataRepositoryHelper.DatabaseNameFor(ConnectionString), "dbo", CodeGenerationHelper.GetTableName<CalendarEventStatus>(), Environment.NewLine);
                stringBuilder.AppendFormat("WHERE sqltable.Id='{0}'{1}", item.Id, Environment.NewLine);
            }
    
            string command = stringBuilder.ToString();
            try
            {
                Repository.ExecuteSqlCommand(command);
            }
            catch(Exception)
            {
                Log.Error(command);
                throw;
            }
        }
        #endregion
    
        #region CascadeRemove
        public virtual void CascadeRemove(CalendarEvent item)
        {
            Requires<InvalidKeyException>.GreaterThan(item.Id, 0);
            Log.Verbose("CascadeRemove({0})", item.ToString());
    		//1==>X
            //1<==>X
            base.CascadeRemove(item);
        }
        public virtual void CascadeRemoveRange(IList<CalendarEvent> items)
        {
            foreach(var item in items.ToArray()) CascadeRemove(item);
        }
        public virtual void CascadeRemove(CalendarEventRecurrence item)
        {
            Requires<InvalidKeyException>.GreaterThan(item.Id, 0);
            Log.Verbose("CascadeRemove({0})", item.ToString());
    		//1==>X
            //1<==>X
            CascadeRemoveRange(Repository.All<CalendarEvent>().Include(x => x.Recurrence).Where(x => x.Recurrence.Id == item.Id).ToList()); //1<==X
            base.CascadeRemove(item);
        }
        public virtual void CascadeRemoveRange(IList<CalendarEventRecurrence> items)
        {
            foreach(var item in items.ToArray()) CascadeRemove(item);
        }
        public virtual void CascadeRemove(CalendarEventStatus item)
        {
            Requires<InvalidKeyException>.GreaterThan(item.Id, 0);
            Log.Verbose("CascadeRemove({0})", item.ToString());
    		//1==>X
            //1<==>X
            CascadeRemoveRange(Repository.All<CalendarEvent>().Include(x => x.Status).Where(x => x.Status.Id == item.Id).ToList()); //1<==X
            base.CascadeRemove(item);
        }
        public virtual void CascadeRemoveRange(IList<CalendarEventStatus> items)
        {
            foreach(var item in items.ToArray()) CascadeRemove(item);
        }
        #endregion
        #endregion
     
    }
}
