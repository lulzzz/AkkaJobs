/////////////////////////////////////////////////////////////////////////////////
//                                                                             //
// <auto-generated>                                                            //
// Date=? Machine=? User=?                                                     //
// Copyright (c) 2010-2011 Agridea, All Rights Reserved                        //
// </auto-generated>                                                           //
//                                                                             //
/////////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Data.SqlClient;
//using System.Data.Entity.SqlServer;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using System.Text;
using Agridea;
using Agridea.Calendar;
using Agridea.DataRepository;
using Agridea.Diagnostics.Contracts;
using Agridea.Diagnostics.Logging;
using Agridea.Metadata;
using Agridea.News;
using Agridea.Security;
using Agridea.Service;
using Agridea.Web.UI;

namespace Agridea
{
    public partial interface IAgrideaService
    {
        #region GetByDiscriminant
        CalendarEventRecurrence GetByDiscriminants(CalendarEventRecurrence item);
        CalendarEventRecurrence GetByDiscriminants(CalendarEventRecurrence item, IList<CalendarEventRecurrence> existingItems);
        CalendarEventStatus GetByDiscriminants(CalendarEventStatus item);
        CalendarEventStatus GetByDiscriminants(CalendarEventStatus item, IList<CalendarEventStatus> existingItems);
        #endregion
    
        #region Insert/Update/Delete SQL commands
        void SqlBulkCopy(IEnumerable<CalendarEvent> items);
    	void SqlBulkCopyWithId(IEnumerable<CalendarEvent> items);
        void SqlInsert(IEnumerable<CalendarEvent> items);
        void SqlUpdate(IEnumerable<CalendarEvent> items);
        void SqlBulkCopy(IEnumerable<CalendarEventRecurrence> items);
    	void SqlBulkCopyWithId(IEnumerable<CalendarEventRecurrence> items);
        void SqlInsert(IEnumerable<CalendarEventRecurrence> items);
        void SqlUpdate(IEnumerable<CalendarEventRecurrence> items);
        void SqlBulkCopy(IEnumerable<CalendarEventStatus> items);
    	void SqlBulkCopyWithId(IEnumerable<CalendarEventStatus> items);
        void SqlInsert(IEnumerable<CalendarEventStatus> items);
        void SqlUpdate(IEnumerable<CalendarEventStatus> items);
        #endregion
        
        #region CascadeRemove
        void CascadeRemove(CalendarEvent item); 
        void CascadeRemoveRange(IList<CalendarEvent> items); 
        void CascadeRemove(CalendarEventRecurrence item); 
        void CascadeRemoveRange(IList<CalendarEventRecurrence> items); 
        void CascadeRemove(CalendarEventStatus item); 
        void CascadeRemoveRange(IList<CalendarEventStatus> items); 
        #endregion
    }
}
